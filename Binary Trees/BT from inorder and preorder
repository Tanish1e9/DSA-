LC link: https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/


    TreeNode* helper(int pre_start,int pre_end,int in_start,int in_end,
    vector<int>&preorder,vector<int>&inorder,map<int,int>&indices){
        if(pre_start>pre_end || in_start>in_end) return 0;

        TreeNode*root=new TreeNode(preorder[pre_start]);
        int root_index=indices[root->val];
        int left_elements = root_index-in_start;
    
        root->left=helper(pre_start+1,pre_start+left_elements,in_start,root_index-1,preorder,inorder,indices);
        root->right=helper(pre_start+left_elements+1,pre_end,root_index+1,in_end,preorder,inorder,indices);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int pre_start=0;
        int pre_end=preorder.size()-1;
        int in_start=0;
        int in_end=inorder.size()-1;
    
        map<int,int> indices;
        for(int i=0;i<inorder.size();i++){
            indices[inorder[i]]=i;
        }
        return helper(pre_start,pre_end,in_start,in_end,preorder,inorder,indices);
    }
