LC link: https://leetcode.com/problems/validate-binary-search-tree/description/

    // Yaha prev ko as a Node islie hi store kia h because value me ni kr skte the
    // range of node's values was INT_MIN to INT_MAX
    // islie prev =0 kia

    // 1) O(N),O(height)
    // TreeNode*prev=0;
    // bool helper(TreeNode*root){
    //     if(root==0) return 1;
    //     if(helper(root->left)==0) return 0;
    //     if(prev && root->val <= prev->val) return 0;
    //     prev=root;
    //     return helper(root->right);
    // }
    // bool isValidBST(TreeNode* root) {
    //     return helper(root);
    // }

    // 2) O(N),O(height)
    bool helper(TreeNode*root,long left,long right){
        if(root==0) return 1;
        if(root->val <= left || root->val >= right) return 0;
        return helper(root->left,left,root->val) && helper(root->right,root->val,right);
    }
    bool isValidBST(TreeNode* root) {
        long left = long(INT_MIN)-1;
        long right = long(INT_MAX)+1;
        return helper(root,left,right);
    }

    // 3) O(N),O(1)
    bool isValidBST(TreeNode* root) {
        TreeNode*prev=0;
        TreeNode*curr=root;
        bool ans=true;
        while(curr){
            if(curr->left==0){
                if(prev && curr->val <= prev->val) ans=0;
                prev=curr;
                curr=curr->right;
            }
            else{
                TreeNode*temp=curr->left;
                while(temp->right && temp->right!=curr) temp=temp->right;
                if(temp->right==curr){
                    temp->right=0;
                    if(prev && curr->val <= prev->val) ans=0;
                    prev=curr;
                    curr=curr->right;
                }
                else{
                    temp->right=curr;
                    curr=curr->left;
                }
            }
        }
        return ans;
    }
