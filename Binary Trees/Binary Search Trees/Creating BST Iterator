LC link: https://leetcode.com/problems/binary-search-tree-iterator/


// M-1  but it has SC O(N)
class BSTIterator {
public:
    vector<int>inorder;
    int cur;
    BSTIterator(TreeNode* root) {
        TreeNode*curr=root;
        cur=-1;
        while(curr){
            if(curr->left==0){
                inorder.push_back(curr->val);
                curr=curr->right;
            }
            else{
                TreeNode*temp=curr->left;
                while(temp->right && temp->right!=curr) temp=temp->right;
                if(temp->right==curr){
                    temp->right=0;
                    inorder.push_back(curr->val);
                    curr=curr->right;
                }
                else{
                    temp->right=curr;
                    curr=curr->left;
                }
            }
        }
    }
    
    int next() {
        return inorder[++cur];
    }
    
    bool hasNext() {
        return cur+1 < inorder.size();
    }
};

// M-2 This has SC O(height) and TC is O(1) on average
class BSTIterator {
    stack<TreeNode*> s;
    public:
    BSTIterator(TreeNode* root) {
        func(root);
    }
    
    int next() {
        TreeNode* curr=s.top();
        s.pop();
        int ans=curr->val;
        func(curr->right);
        return ans;
    }
    
    bool hasNext() {
        return !s.empty();
    }

    private:
    void func(TreeNode*curr){
        while(curr){
            s.push(curr);
            curr=curr->left;
        }
    }
};
/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
