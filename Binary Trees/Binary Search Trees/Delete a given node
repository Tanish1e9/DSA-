LC link: https://leetcode.com/problems/delete-node-in-a-bst/description/

// Iterative
TreeNode* findMin(TreeNode* root) {
    while(root->left) root = root->left;
    return root;
}
TreeNode* deleteNode(TreeNode* root, int key) {
    //your code goes here
    if(root==NULL) return NULL;
    TreeNode* ans = root;
    TreeNode* curr = root;
    TreeNode* prev = NULL;
    while(curr) {
        if(curr->val > key) {
            prev = curr;
            curr = curr->left;
        }
        else if(curr->val < key) {
            prev = curr;
            curr = curr->right;
        }
        else {
            if(curr->left == NULL) {
                if(!prev) ans = curr->right;
                else if(prev->left == curr) prev->left = curr->right;
                else prev->right = curr->right;
            }
            else if(curr->right == NULL) {
                if(!prev) ans = curr->left;
                else if(prev->left == curr) prev->left = curr->left;
                else prev->right = curr->left;
            }
            else {
                findMin(curr->right)->left = curr->left;
                if(!prev) ans = curr->right;
                else if(prev->left == curr) prev->left = curr->right;
                else prev->right = curr->right;
            }
            break;
        }
    }
    delete curr;
    return ans;
}
    

// Recursive
TreeNode* deleteNode(TreeNode* root, int key) {
    //your code goes here
    if(root==NULL) return NULL;
    TreeNode* ans = root;
    if(root->val == key) {
        if(root->left == NULL) ans = root->right;
        else if(root->right == NULL) ans = root->left;
        else{
            ans = root->right;
            TreeNode* temp = root->right;
            while(temp->left) temp = temp->left;
            temp->left = root->left;
        }
        delete root;
    } else if(root->val > key) {
        root->left = deleteNode(root->left, key);
    } else {
        root->right = deleteNode(root->right, key);
    }
    return ans;
}
