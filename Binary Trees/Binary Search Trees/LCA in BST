LC link: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

    // TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    //     if(root==0) return 0;
    //     if(root->val < p->val && root->val < q->val){
    //         return lowestCommonAncestor(root->right,p,q);
    //     }
    //     else if(root->val > p->val && root->val > q->val){
    //         return lowestCommonAncestor(root->left,p,q);
    //     }
    //     return root;
    // }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==0) return 0;
        TreeNode*curr=root;
        while(true){
            if(curr->val < p->val && curr->val < q->val) curr=curr->right;
            else if(curr->val > p->val && curr->val > q->val) curr=curr->left;
            else return curr;
        }
        return 0;
    }
