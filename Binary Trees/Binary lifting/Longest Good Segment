https://www.codechef.com/problems/LGSEG

// Dekh isme first thought hi aisa tha ki har index pe jayenge and will do BS for the right index
// par check krne k lie ki jo resultant segment h wo good h ki nahi O(n) lagta to total O(nlogn * n) ho jata
// to ab soche ki k tho subsegment krna h
// since we have to take longest to k ke pehle to chodenge nahi
// islie go on every index and prefix sum pe BS krke find the index jaha pe sub segment khatam ho (yani sum <=S) ho 
// ab aisa K baar krna hoga to O(nlogn*k) again no
// par ab socho ki k ke hi powers me store krke rakh le tab to O(nlogk) me ho jayega na
// store krne me O(nlogn) + O(nlogk) lagega time
// yaha pe basically child parent relationship banaye h hm (exactly nahi h +1 ka lafda h but feeling same h)
// jaha bhi k parents tk jaana ho to waha binary lifting laga lena

#include <bits/stdc++.h>
using namespace std;
#define int long
void populate(int n, int k, int s, vector<int> &arr, vector<int> &prefix_sum, vector<vector<int>> &table) {
    int sum = 0;
    for(int i=0;i<n;i++){
        sum += arr[i];
        prefix_sum[i] = sum;
    }
    
    for(int i=0;i<n;i++) {
       int left = i>=1 ? prefix_sum[i-1] : 0;
       int low = i;
       int high = n-1;
       while(low<=high) {
           int mid = low + (high - low)/2;
           if(prefix_sum[mid]-left > s) high = mid - 1;
           else low = mid + 1;
       }
       table[0][i] = high;
    }
    
    int pow = 1;
    while((1<<pow) <= k) {
        for(int i=0;i<n;i++){
            int mid = table[pow-1][i];
            if(mid+1<n) table[pow][i] = table[pow-1][mid+1];
        }
        pow++;
    }
}

signed main() {
	// your code goes here
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int t;
	cin >> t;
	while(t--) {
	    int n,k,s;
	    cin >> n >> k >> s;
	    vector<int> arr(n);
	    for(int i=0;i<n;i++) {
	        cin >> arr[i];
	    }
	    vector<int> prefix_sum(n,0);
	    vector<vector<int>> table(17, vector<int>(n, n-1));
	    populate(n, k, s, arr, prefix_sum, table);

        int ans = 0;
	    for(int i=0;i<n;i++) {
	        int start = i;
	        for(int j=16;j>=0;j--) {
	            if(start == n) break;
	            if((1<<j)&k){
	                start = table[j][start]+1;
	            }
	        }
	        ans = max(ans, start-i);
	    }
	    cout << ans << endl;
	}
}
