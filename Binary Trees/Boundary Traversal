GFG link: https://www.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1

// Initially add root
// Ye simple h pehle left boundary daal do, fir any DFS krke leaves daal dena ( bas left -> right hona chahye jo ki har DFS hoga)
// Then right boundary add kr do
// Handle one edge case when root itself is a leaf node then just return {root->data};
    void inorder(Node*root,vector<int>&ans){
        if(root==0) return;
        if(root->left ==0 && root->right==0) ans.push_back(root->data);
        inorder(root->left,ans);
        inorder(root->right,ans);
    }
    vector <int> boundary(Node *root)
    {
        if(root==0) return {};
        if(root->left==0 && root->right==0) return {root->data};
        vector<int> ans;
        ans.push_back(root->data);
        
        Node*curr=root->left;
        while(curr){
            if(curr->left || curr->right) ans.push_back(curr->data);
            if(curr->left) curr=curr->left;
            else curr=curr->right;
        }
        
        inorder(root,ans);
        
        curr=root->right;
        stack<Node*> s;
        while(curr){
            if(curr->left || curr->right) s.push(curr);
            if(curr->right) curr=curr->right;
            else curr=curr->left;
        }
        while(!s.empty()){
            ans.push_back(s.top()->data);
            s.pop();
        }
        return ans;
    }



// This was my earlier thought thoda messy h par TC bachane ka koshish kie h
vector <int> boundary(Node *root)
    {
        if(root==0) return {};
        vector<int> ans;
        stack<Node*>s;
        s.push(root);
        ans.push_back(root->data);
        
        Node*curr=root->left;
        while(curr){
            ans.push_back(curr->data);
            s.push(curr);
            if(curr->left) curr=curr->left;
            else curr=curr->right;
        }
        
        Node*prev=NULL;
        while(!s.empty() || curr){
            if(curr){
                if(curr->left==0 && curr->right==0){ 
                    prev=curr;
                    ans.push_back(curr->data);
                }
                s.push(curr);
                if(curr->left) curr=curr->left;
                else curr=curr->right;
            }
            else{
                Node*temp=s.top();
                s.pop();
                while(!s.empty() && s.top()->right==temp){
                    temp=s.top();
                    s.pop();
                }
                if(!s.empty()) curr=s.top()->right;
            }
        }
        
        curr=root->right;
        while(curr){
            if(curr!=prev)s.push(curr);
            if(curr->right) curr=curr->right;
            else curr=curr->left;
        }
        while(!s.empty()){
            ans.push_back(s.top()->data);
            s.pop();
        }
        return ans;
    }
