CSES link: https://cses.fi/problemset/task/1135/

#include<bits/stdc++.h>
using namespace std;
#define int long
void dfs(int node, auto& adj, auto &vis, auto &parent, auto &level) {
	// level aise hi populate hoga na
	// how can you iterate over 2 to n and do level[i] = 1 + level[par[i]]
	// if the level of par[i] has not been determined yet
	vis[node] = true;
	for(int i:adj[node]) {
		if(vis[i]) continue;
		parent[0][i] = node;
		level[i] = level[node] + 1;
		dfs(i, adj, vis, parent, level);
	}
}
void populate_parent(int n, auto& parent, auto &level){
	int k = 1;
	while((1<<k) < n) {
		for(int i=2;i<=n;i++) {
			int mid = parent[k-1][i];
			if(mid!=-1) parent[k][i] = parent[k-1][mid];
		}
		k++;
	}
}
int find_parent(int node, int k, int n, auto &parent){
	if(k==0) return node;
	if(k>=n) return -1;
	int ans = node;
	for(int i=17;i>=0;i--){
		if(ans == -1) break;
		if((1<<i)&k){
			ans = parent[i][ans];
		}
	}
	return ans;
}
int find_lca(int a, int b, int n, auto &parent, auto &level) {
	int la = level[a];
	int lb = level[b];
	if(la>lb) return find_lca(b,a,n,parent,level);
	int diff = lb - la;
	b = find_parent(b, diff, n, parent);
	if(a==b) return a;
	// yaha pe agar binary search kroge to log2n * log2n chala jayega complexity 
	// to TLE maar dega 
	// below approach is of log2n
	for(int i=17;i>=0;i--){
		if((1<<i)>=n) continue;
		int ap = parent[i][a];
		int bp = parent[i][b];
		if(ap!=bp) {
			a = ap;
			b = bp;
		}
	}
	return parent[0][a];
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int n, q;
	cin >> n >> q;
	int powers = log2(n);
	vector<vector<int>> parent(powers+1, vector<int>(n+1, -1));
	vector<vector<int>> adj(n+1);
	for(int i=0;i<n-1;i++){
		int a,b;
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	vector<bool> vis(n+1, false);
	vector<int>level(n+1, 0);
	dfs(1, adj, vis, parent, level);
	populate_parent(n, parent, level);
	while(q--) {
		int a, b;
		cin >> a >> b;
		int lca = find_lca(a,b,n,parent,level);
		int la = level[a];
		int lb = level[b];
		cout << la+lb-2*level[lca] << endl;
	}
	return 0;
}
