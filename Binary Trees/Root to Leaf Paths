LC link: https://leetcode.com/problems/binary-tree-paths/
    // void dfs(TreeNode* root, string &path, vector<string>&ans){
    //     if(root==NULL) return;
    //     int dig = root->val!=0?log10(abs(root->val)) + 1 + (root->val < 0):1;
    //     path+=to_string(root->val);
    //     if(root->left==NULL && root->right ==NULL) {
    //         ans.push_back(path);
    //         path.erase(path.size()-dig);
    //         return;
    //     }
    //     path+="->";
    //     dfs(root->left, path, ans);
    //     dfs(root->right, path, ans);
    //     path.erase(path.size()-dig-2);
    // }
    void dfs(TreeNode* root, string path, vector<string>&ans) {
        if(root==NULL) return;
        if(root->left == NULL && root->right == NULL){
            ans.push_back(path+to_string(root->val));
            return;
        } 
        dfs(root->left, path + to_string(root->val) + "->", ans);
        dfs(root->right, path + to_string(root->val) + "->", ans);
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string>ans;
        string temp;
        dfs(root, temp, ans);
        return ans;
    }

// ye wala simple wala hai upar me pata ni kyu string ghusa dia
GFG link: https://www.geeksforgeeks.org/problems/root-to-leaf-paths/1
    vector<vector<int>> ans;
    void trav(Node*root,vector<int>&temp){
        if(root==0) return;
        temp.push_back(root->data);
        if(root->left==0 && root->right==0){
            ans.push_back(temp);
        }
        trav(root->left,temp);
        trav(root->right,temp);
        temp.pop_back();
    }
    vector<vector<int>> Paths(Node* root) {
        if(root==0) return {};

        vector<int> temp;
        trav(root,temp);
        return ans;
    }
