#include<bits/stdc++.h>
using namespace std;
#define int long long
int mod=1e9+7;
int uniquePathsWithObstacles(vector<vector<int>>& grid) {
    int m=grid.size();
    int n=grid[0].size();
    if(grid[0][0]==1 || grid[m-1][n-1]==1) return 0;
    vector<int> prev(n,0),curr(n,0);
    prev[0]=1;
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(grid[i][j]==1) curr[j]=0;
            else if(i==0 && j==0) curr[j]=1;
            else{
                if(i>=1) curr[j]=prev[j];
                if(j>=1) curr[j]=(prev[j] + curr[j-1])%mod;
            }
        }
        prev=curr;
    }
    return prev[n-1];
}
signed main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n,m;
    cin >> n >> m;
    vector<vector<int>> grid(n,vector<int>(m,0));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            char c;
            cin >> c;
            if(c=='#') grid[i][j]=1;
        }
    }
    cout << uniquePathsWithObstacles(grid) << endl;
    return 0;
}
