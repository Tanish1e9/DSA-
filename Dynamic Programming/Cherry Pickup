LC link: https://leetcode.com/problems/cherry-pickup/

// cherry pickup2 is same as chocolate pickup problem of GFG
// Ye problem ko na aise model krna h ki 2 log (0,0) to (n-1,n-1) jaana chah rhe bas ho jayega fir

class Solution {
public:
    int f(int i,int j1,int j2,auto&grid,auto&memo){
        int n=grid.size();
        int i2 = i+j1-j2;
        if(i2<0 || i2>=n || i<0 || i>=n) return -1e9;
        if(j1<0 || j1>=n || j2<0 || j2>=n) return -1e9;
        if(grid[i][j1]==-1 || grid[i2][j2]==-1) return -1e9;
        if(i==n-1 && i2==n-1 && j1==n-1 && j2==n-1) return grid[n-1][n-1];
        if(memo[i][j1][j2]!=-1) return memo[i][j1][j2];
        int ans=-1e9;
        ans = max(ans,f(i+1,j1,j2,grid,memo));
        ans = max(ans,f(i+1,j1,j2+1,grid,memo));
        ans = max(ans,f(i,j1+1,j2,grid,memo));
        ans = max(ans,f(i,j1+1,j2+1,grid,memo));
        if(i==i2 && j1==j2) return memo[i][j1][j2]=grid[i][j1]+ans;
        return memo[i][j1][j2]=grid[i][j1]+grid[i2][j2] + ans;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n=grid.size();
        if(grid[0][0]==-1 || grid[n-1][n-1]==-1) return 0;
        // vector<vector<vector<int>>>memo(n,vector<vector<int>>(n,vector<int>(n,-1)));
        // return max(0,f(0,0,0,grid,memo));

        // vector<vector<vector<int>>>memo(n+1,vector<vector<int>>(n+1,vector<int>(n+1,-1e9)));
        // for(int i=n-1;i>=0;i--){
        //     for(int j1=n-1;j1>=0;j1--){
        //         for(int j2=n-1;j2>=0;j2--){
        //             int i2=i+j1-j2;
        //             if(i2<0 || i2>=n) continue;
        //             if(grid[i][j1]==-1 || grid[i2][j2]==-1) continue;
        //             if(i==n-1 && i2==n-1 && j1==n-1 && j2==n-1){
        //                 memo[i][j1][j2]=grid[n-1][n-1];
        //                 continue;
        //             }
        //             int ans=-1e9;
        //             ans = max(ans,memo[i+1][j1][j2]);
        //             ans = max(ans,memo[i+1][j1][j2+1]);
        //             ans = max(ans,memo[i][j1+1][j2]);
        //             ans = max(ans,memo[i][j1+1][j2+1]);
        //             if(i==i2 && j1==j2) memo[i][j1][j2]=grid[i][j1]+ans;
        //             else memo[i][j1][j2]=grid[i][j1]+grid[i2][j2] + ans;
        //         }
        //     }
        // }
        // return max(0,memo[0][0][0]);

        vector<vector<int>> next(n+1,vector<int>(n+1,-1e9));
        vector<vector<int>> curr(n+1,vector<int>(n+1,-1e9));
        for(int i=n-1;i>=0;i--){
            for(int j1=n-1;j1>=0;j1--){
                for(int j2=n-1;j2>=0;j2--){
                    int i2=i+j1-j2;
                    if(i2<0 || i2>=n) continue;
                    if(grid[i][j1]==-1 || grid[i2][j2]==-1) {
                        curr[j1][j2]=-1e9;
                        continue;
                    }
                    // ye condition yaha pe alag se likhna h kyunki cherry pickup 2 jaise
                    // kahi bhi chale jaao cross krke to zero mil jata
                    // like agar bottom row cross kr gye to but yaha pe -1e9 dena hoga
                    // to bas ek hi condition pe grid ka value dena h
                    if(i==n-1 && i2==n-1 && j1==n-1 && j2==n-1){
                        curr[j1][j2]=grid[n-1][n-1];
                        continue;
                    }
                    int ans=-1e9;
                    // dekh niche ki chaar jagaho pe agar out of bound chala gya usi k lie ek extra index bana die h 
                    // storage ka waha pe -1e9 hi pada rhega and wo use hota rhega
                    ans = max(ans,next[j1][j2]);
                    ans = max(ans,next[j1][j2+1]);
                    ans = max(ans,curr[j1+1][j2]);
                    ans = max(ans,curr[j1+1][j2+1]);
                    if(i==i2 && j1==j2) curr[j1][j2]=grid[i][j1]+ans;
                    else curr[j1][j2]=grid[i][j1]+grid[i2][j2]+ans;
                }
            }
            next=curr;
        }
        return max(0,next[0][0]);
    }
};
