GFG link: https://www.geeksforgeeks.org/problems/chocolates-pickup/1

    int f(int i,int j1,int j2,vector<vector<int>>&grid,vector<vector<vector<int>>>&memo){
        if(i==grid.size()) return 0;
        if(j1<0 || j1>=grid[0].size() || j2<0 || j2>=grid[0].size()) return -1e9;
        if(memo[i][j1][j2]!=-1) return memo[i][j1][j2];
        int ans=0;
        for(int p=-1;p<=1;p++){
            for(int q=-1;q<=1;q++){
                ans=max(ans,f(i+1,j1+p,j2+q,grid,memo));
            }
        }
        if(j1==j2)return memo[i][j1][j2]=ans+grid[i][j1];
        return memo[i][j1][j2]=ans+grid[i][j1]+grid[i][j2];
    }
    int solve(int m, int n, vector<vector<int>>& grid) {
        // vector<vector<vector<int>>>memo(m,vector<vector<int>>(n,vector<int>(n,-1)));
        // return f(0,0,n-1,grid,memo);
        
        // vector<vector<vector<int>>>memo(m+1,vector<vector<int>>(n,vector<int>(n,0)));
        // for(int i=m-1;i>=0;i--){
        //     for(int j1=n-1;j1>=0;j1--){
        //         for(int j2=n-1;j2>=0;j2--){
        //             int ans=0;
        //             for(int p=-1;p<=1;p++){
        //                 for(int q=-1;q<=1;q++){
        //                     if(j1+p>=0 && j1+p<n && j2+q>=0 && j2+q<n)
        //                     ans=max(ans,memo[i+1][j1+p][j2+q]);
        //                 }
        //             }
        //             if(j1==j2) memo[i][j1][j2]=grid[i][j1]+ans;
        //             else memo[i][j1][j2]=grid[i][j1]+grid[i][j2]+ans;
        //         }
        //     }
        // }
        // return memo[0][0][n-1];
        
        vector<vector<int>>next(n,vector<int>(n,0));
        vector<vector<int>>curr(n,vector<int>(n,0));
        for(int i=m-1;i>=0;i--){
            for(int j1=n-1;j1>=0;j1--){
                for(int j2=n-1;j2>=0;j2--){
                    int ans=0;
                    for(int p=-1;p<=1;p++){
                        for(int q=-1;q<=1;q++){
                            if(j1+p>=0 && j1+p<n && j2+q>=0 && j2+q<n)
                            ans=max(ans,next[j1+p][j2+q]);
                        }
                    }
                    if(j1==j2) curr[j1][j2]=grid[i][j1]+ans;
                    else curr[j1][j2]=grid[i][j1]+grid[i][j2]+ans;
                }
            }
            next=curr;
        }
        return next[0][n-1];
    }
