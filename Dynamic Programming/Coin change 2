LC link: https://leetcode.com/problems/coin-change-ii/

    int f(int i,int amt,auto&coins,auto&memo){
        if(amt==0) return 1;
        if(i<0) return 0;
        if(memo[i][amt]!=-1) return memo[i][amt];
        int pick=0;
        if(amt>=coins[i]) pick = f(i,amt-coins[i],coins,memo);
        int npick = f(i-1,amt,coins,memo);
        return memo[i][amt]=pick+npick;
    }
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        // vector<vector<int>> memo(n,vector<int>(amount+1,-1));
        // return f(n-1,amount,coins,memo);

        // vector<vector<int>> memo(n,vector<int>(amount+1,0));
        // for(int i=0;i<n;i++){
        //     for(int amt=0;amt<=amount;amt++){
        //         if(amt==0) memo[i][amt]=1;
        //         else if(i==0){
        //             if(amt%coins[i]==0) memo[i][amt] = 1;
        //         }
        //         else{
        //             int pick=0;
        //             if(amt>=coins[i]) pick = memo[i][amt-coins[i]];
        //             int npick = memo[i-1][amt];
        //             memo[i][amt]=pick+npick;
        //         }
        //     }
        // }
        // return memo[n-1][amount];

        vector<int>prev(amount+1,0);
        vector<int>curr(amount+1,0);
        for(int i=0;i<n;i++){
            for(int amt=0;amt<=amount;amt++){
                if(amt==0) curr[amt]=1;
                else if(i==0){
                    if(amt%coins[i]==0) curr[amt] = 1;
                }
                else{
                    int pick=0;
                    if(amt>=coins[i]) pick = curr[amt-coins[i]];
                    int npick = prev[amt];
                    curr[amt]=pick+npick;
                }
            }
            prev=curr;
        }
        return prev[amount];
    }
