LC link: https://leetcode.com/problems/count-square-submatrices-with-all-ones/

// Yaha dekho concept ye h na ki dp[i][j] denotes (i,j) ko bottom right corner maanke kitne squares end honge
// to like imagine krna ki (i-1,j),(i-1,j-1),(i,j-1) uspe jitna bhi number likha h uska minimum plus 1 correct ayega
// minimum islie ki jis karan ( zero k kaaran ) wo sabse chota wala square bada ni ho paya usi kaaran se
// current square aur bada nahi ho payega and that's it
// thoda dry run krke clear ho jayega

    int countSquares(vector<vector<int>>& mat){
        // int m=mat.size();
        // int n=mat[0].size();
        // vector<vector<int>>dp(m,vector<int>(n,0));
        // int ans=0;
        // for(int i=0;i<m;i++){
        //     for(int j=0;j<n;j++){
        //         if(i==0) dp[i] = mat[i];
        //         else if(j==0) dp[i][j]=mat[i][j];
        //         else{
        //             if(mat[i][j]==1)dp[i][j]=min({dp[i-1][j],dp[i-1][j-1],dp[i][j-1]})+1;
        //             else dp[i][j]=0;
        //         }
        //         ans+=dp[i][j];
        //     }
        // }
        // return ans;

        int m=mat.size();
        int n=mat[0].size();
        vector<int>curr(n,0),prev(n,0);
        int ans=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0) curr = mat[i];
                else if(j==0) curr[j]=mat[i][j];
                else{
                    if(mat[i][j]==1)curr[j]=min({prev[j],prev[j-1],curr[j-1]})+1;
                    else curr[j]=0;
                }
                ans+=curr[j];
            }
            prev=curr;
        }
        return ans;
    }
