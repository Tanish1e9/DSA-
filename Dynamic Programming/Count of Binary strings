Algozenith link: https://maang.in/problems/Count-of-Binary-Strings-503?resourceUrl=cs70-cp478-pl3264-rs503&returnUrl=%5B%22%2Fcourses%2FDP-Workshop-Vivek-Gupta-Youtube-70%3Ftab%3Dchapters%22%5D


#include<bits/stdc++.h>
using namespace std;
#define int long long
const int mod = 1e9+7;
int dp[1000001][4];

// i denotes remaining length
// we do it this way so as to cache across queries
int helper(int i, int j) {
    if(j==4) return 0;
    if(i==0) return 1;
    if(dp[i][j]!=-1) return dp[i][j];
    
    int ans = 0;
    // putting diff than s[j]
    // j=0 me diff daala to j=0 hi rhega
    // j=1 me diff daala tab bhi j=1 rhega
    // j=2 me diff daala to j=0 chala jayega
    // j=3 me diff daala to j=2 chala jayega
    // Isme yahi dekhna ki suffix kisi prefix se match to nahi kr rha

    if(j&1) ans = helper(i-1, (j+1)/2);
    else ans = helper(i-1, 0);
 
    ans = (ans + helper(i-1, j+1))%mod;     // putting same as s[j]
    return dp[i][j] = ans;
}
signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    memset(dp, -1, sizeof(dp));
    int t;
    cin >> t;
    while(t--) {
        int n;
        cin >> n;
        cout << helper(n,0) << "\n";
    }
    return 0;
}



// General version - for any pattern given
// KMP ka application h aur kuch nahi... agar kahi pe same letter dala 
// as s[j] tab to j badhega hi... wrna alag letter dalne pe
// dekhna hoga ki kitna longest prefix match kr rha h 

#include<bits/stdc++.h>
using namespace std;
#define int long long
const int mod = 1e9+7;
int dp[1000001][4];
string pat;
vector<int> lps;

// i denotes remaining length
// we do it this way so as to cache across queries
int helper(int i, int j) {
    if(j==pat.size()) return 0;
    if(i==0) return 1;
    if(dp[i][j]!=-1) return dp[i][j];
    
    int ans = 0;
    // putting diff than s[j]
    int j_copy = j;

    while(j_copy>0 && pat[j_copy] == pat[ori]) j_copy = lps[j_copy-1];
    if(pat[j_copy] == pat[ori]) ans = helper(i-1, 0);
    else ans = helper(i-1, j_copy+1);
 
    ans = (ans + helper(i-1, j+1))%mod;     // putting same as s[j]
    return dp[i][j] = ans;
}
void compute_lps() {
    lps.assign(pat.size(), 0);
    int j = 0;
    for(int i=1;i<pat.size();i++) {
        while(j>0 && pat[j]!=pat[i]) j = lps[j-1];

        if(pat[i] == pat[j]) {
            lps[i] = j+1;
            j++;
        } else lps[i] = 0;
    }
}
signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    memset(dp, -1, sizeof(dp));
    pat = "0100";
    compute_lps();
    int t;
    cin >> t;
    while(t--) {
        int n;
        cin >> n;
        cout << helper(n,0) << "\n";
    }
    return 0;
}
