GFG link: https://www.geeksforgeeks.org/problems/perfect-sum-problem5633/1

    // isme observe krna n*sum <=1e6 de rakha h to dp solution chal gya
    // but CSES me higher constraints h to niche dekho wo kaise hoga

    int mod=1e9+7;
    int f(int i,int arr[],vector<vector<int>>&memo,int sum){
        if(i==0){
            if(sum==0) return (arr[0]==0)+1;
            return arr[0]==sum;
        }
        if(memo[i][sum]!=-1) return memo[i][sum];
        int pick = 0;
        if(sum>=arr[i]) pick=f(i-1,arr,memo,sum-arr[i])%mod;
        int npick = f(i-1,arr,memo,sum)%mod;
        return memo[i][sum]=(pick+npick)%mod;
    }
    int perfectSum(int arr[], int n, int sum){
        // vector<vector<int>>memo(n,vector<int>(sum+1,-1));
        // return f(n-1,arr,memo,sum);
        
        // vector<vector<int>>memo(n,vector<int>(sum+1,0));
        // for(int i=0;i<n;i++){
        //     for(int k=0;k<=sum;k++){
        //         if(i==0) {
        //             if(k==0) memo[i][k]=(arr[0]==0)+1;
        //             else memo[i][k] = (arr[0]==k);
        //         }
        //         else{
        //             int pick=0;
        //             if(k>=arr[i]) pick=memo[i-1][k-arr[i]]%mod;
        //             int npick = memo[i-1][k]%mod;
        //             memo[i][k]=(pick+npick)%mod;
        //         }
        //     }
        // }
        // return memo[n-1][sum];
        
        vector<int>prev(sum+1,0);
        vector<int>curr(sum+1,0);
        for(int i=0;i<n;i++){
            for(int k=0;k<=sum;k++){
                if(i==0){
                    if(k==0) curr[k]=(arr[0]==0)+1;
                    else curr[k] = (arr[0]==k);
                }
                else{
                    int pick=0;
                    if(k>=arr[i]) pick=prev[k-arr[i]]%mod;
                    int npick = prev[k]%mod;
                    curr[k]=(pick+npick)%mod;
                }
            }
            prev=curr;
        }
        return prev[sum];
    }


CSES link: https://cses.fi/problemset/task/1628/

// meet in the middle technique bolte
sum <=1e9 and n<=40 to n*sum <= 1e10 ya 1e11 ho gya so TLE MLE dono de jayega
// islie yaha pe we will try to generate all subsets 
// but 2^40 wo bhi TLE maar dega
// but observe 2*(2^20) yaani array ko split krke agar generate kre to range me hoga
// we will store all the sums with their frequency and fir jin do sums ka sum x hoga unki frequencies ko multiply krke
// add krte jana and that's the ans

#include<bits/stdc++.h>
using namespace std;
#define int long long
int func(int* arr1,int*arr2,int n,int x){
	unordered_map<int,int> sums_1;
	sums_1.reserve(1<<20);
    // code to simple hi h bas ye ek line bhut keemti h... reserve like pehle hi map ko bata deta itne keys aane wale h
    // to maap apne se hi optimised hashing kr leta h ni likhoge to TLE aayega likh doge to chal jayega
	int ans=0;
	for(int mask=0; mask < (1<<(n/2));mask++){
		int sum=0;
		for(int j=0;j<(n/2);j++){
			if((1<<j)&mask){
				sum+=arr1[j];
			}
		}
		sums_1[sum]++;
	}
	for(int mask=0; mask<(1<<(n-n/2));mask++){
		int sum=0;
		for(int j=0;j<(n-n/2);j++){
			if((1<<j)&mask){
				sum+=arr2[j];
			}
		}
		if(sums_1.contains(x-sum)) ans+=sums_1[x-sum];
	}
	return ans;
}
signed main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n,x;
	cin >> n >> x;
	int arr1[n/2],arr2[n-n/2];
	for(int i=0;i<n/2;i++){
		cin >> arr1[i];
	}
	for(int i=0;i<n-n/2;i++){
		cin >> arr2[i];
	}
	cout << func(arr1,arr2,n,x) << endl;
    return 0;
}
