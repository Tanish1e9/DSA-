Spoj link: https://www.spoj.com/problems/LUCIFER/

// M-1
// Negative numbers ke lie ek mast flag bana lia h jisse negative bhi kr pa rhe store
// isme soch rhe hoge ki if(isneg) then return 0 kr dete h pehle hi
// this will be wrong kyunki ho skta h na ki bich me sum negative ho but end tk positive ho jaye
// also yaha signed difference lena h to ye nagtive ka panga krna hi padega
// common mistake ki sum ka sign nahi consider krna while calculating updated_sum
// also iss chakkar me sum ko hi update mat kr dena, ... niche dp me kaam ayega
// islie dekh lo kaise kie h

#include<bits/stdc++.h>
using namespace std;
#define int long long
bool sieve[100];
int dp[12][2][100][2];
void compute() {
	memset(sieve, 1, sizeof(sieve));
	sieve[0] = sieve[1] = 0;
	for(int i=2;i<=99;i++) {
		if(!sieve[i]) continue;
		for(int j=i*i;j<=99;j+=i) {
			sieve[j] = false;
		}
	}
}
int helper(string &s, int id, bool tight, int sum, bool isneg) {
	if(id == s.size()) {
		if(sum==0 || isneg) return 0;
		return sieve[sum];
	}
	if(dp[id][tight][sum][isneg]!=-1) return dp[id][tight][sum][isneg];
	int limit = tight ? (s[id]-'0') : 9;
	int ans = 0;
	for(int i=0;i<=limit;i++) {
		bool isEven = (s.size() - id)%2 == 0;
		int updated_sum = sum * (isneg ? -1 : 1);

		if(isEven) updated_sum += i;
		else updated_sum -= i;
		
		ans += helper(s, id+1, tight && (i==s[id]-'0'), abs(updated_sum), updated_sum < 0);
	}
	return dp[id][tight][sum][isneg] = ans;
}
int call(int n) {
	string s = to_string(n);
	return helper(s,0,1,0,0);
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	compute();
	int t;
	cin >> t;
	while(t--) {
		int l, r;
		cin >> l >> r;
		int ans = 0;
		memset(dp, -1, sizeof(dp));
		ans = call(r);
		memset(dp, -1, sizeof(dp));
		if(l>=1) ans -= call(l-1);
		cout << ans << endl; 
	}
	
	return 0;
}



// M-2
// isme right se 1 based indexing k hisab se signed difference lena h
// negative sums are not considered even if their absolute is prime
// 200+cnt islie kie h ki kahi negative ho jaye to negative indexing na chala jaye aur isi chiz me safe rhne k lie
// 1000 tk ka sieve bana die
// flag denotes even hai yani add krna h
// to agar number ka size even h na to first index will be even yani flag 1 pass krna h ab dekh lo kaise kia

#include<bits/stdc++.h>
using namespace std;
#define int long long
const int mod = 1e9+7;
int dp[12][2][1000][2];
vector<bool>isPrime(1000,1);
void sieve(){
	isPrime[0]=isPrime[1]=0;
	for(int i=2;i<1000;i++){
		if(!isPrime[i]) continue;
		for(int j=i*2;j<1000;j+=i){
			isPrime[j]=0;
		}
	}
}
int f(string&s,int idx,int restriction,int cnt,bool flag){
	if(idx==s.size()) return cnt>=2 && isPrime[cnt];
	if(dp[idx][restriction][200+cnt][flag]!=-1) return dp[idx][restriction][200+cnt][flag];
	int limit = restriction ? s[idx]-'0':9;
	int ans=0;
	for(int i=0;i<=limit;i++){
		int updated = cnt+i;
		if(!flag) updated-=2*i;
		ans+=f(s,idx+1,restriction && (i==limit),updated,!flag);
	}
	return dp[idx][restriction][200+cnt][flag] = ans;
}
signed main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	sieve();
	int t;
	cin >> t;
	while(t--){
		int a,b;
		cin >> a>> b;
		string r = to_string(b);
		memset(dp,-1,sizeof(dp));
		int right = f(r,0,1,0,(r.size()-1)%2);
		if(a==0) cout << right << endl;
		else{
			string l = to_string(a-1);
			memset(dp,-1,sizeof(dp));
			cout << right - f(l,0,1,0,(l.size()-1)%2) << endl; 
			// kabhi bhi right to left nahi ja skte wrna wo restriction wala logic galat ho
			// jayega na soch khud hi 
		}
	}
	return 0;
}
