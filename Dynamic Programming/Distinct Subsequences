LC link: https://leetcode.com/problems/distinct-subsequences/

    int f(int i,int j,string&s,string&t,auto&memo){
        if(j<0) return 1;
        if(i<0) return 0;
        if(memo[i][j]!=-1) return memo[i][j];
        int pick =0;
        if(s[i]==t[j]) pick = f(i-1,j-1,s,t,memo);
        int npick = f(i-1,j,s,t,memo);
        return memo[i][j]=pick+npick;
    }
    int numDistinct(string s, string t) {
        int m=s.size();
        int n=t.size();
        // vector<vector<int>> memo(m,vector<int>(n,-1));
        // return f(m-1,n-1,s,t,memo);

        // vector<vector<double>> memo(m+1,vector<double>(n+1,0));
        // for(int j=1;j<=n;j++){
        //     memo[0][j]=0;
        // }
        // for(int i=0;i<=m;i++){
        //     memo[i][0]=1;
        // }
        // for(int i=1;i<=m;i++){
        //     for(int j=1;j<=n;j++){
        //         double pick=0;
        //         if(s[i-1]==t[j-1]) pick = memo[i-1][j-1];
        //         double npick = memo[i-1][j];
        //         memo[i][j]=pick+npick;
        //     }
        // }
        // return (int)memo[m][n];

        vector<double>prev(n+1,0);
        for(int j=1;j<=n;j++){
            prev[j]=0;
        }
        prev[0]=1;
        for(int i=1;i<=m;i++){
            for(int j=n;j>=1;j--){
                double pick=0;
                if(s[i-1]==t[j-1]) pick = prev[j-1];
                double npick = prev[j];
                prev[j]=pick+npick;
            }
        }
        return (int)prev[n];
    }
