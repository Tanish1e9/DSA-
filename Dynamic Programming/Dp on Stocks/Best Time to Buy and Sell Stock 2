LC link: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/


// Dp solution
// buy krte waqt negative add krna sell krte waqt positive
// End me dekh agar kuch buy kia hua rh gya and sell nahi kia wo apne aap hi ek kharab solution banke reject ho jayega

// Memoization
int helper(int i, int can_sell, auto &prices, auto &memo) {
    if(i==prices.size()) return 0;
    if(memo[i][can_sell]!=-1) return memo[i][can_sell];
    if(can_sell == 1){
        return memo[i][can_sell]=max(prices[i] + helper(i+1, 0, prices, memo), helper(i+1, 1, prices, memo));
    } 
    return memo[i][can_sell] = max(helper(i+1, 0, prices, memo), -prices[i] + helper(i+1,1,prices,memo));
}
int maxProfit(vector<int>& prices) {
    int n = prices.size();
    vector<vector<int>> memo(n, vector<int>(2,-1));
    return helper(0,0,prices,memo);
}

// Tabulation
int maxProfit(vector<int>& prices) {
    int n = prices.size();
    vector<vector<int>> memo(n+1, vector<int>(2,0));

    for(int i=n-1;i>=0;i--) {
        for(int can_sell=0;can_sell<2;can_sell++) {
            if(can_sell == 1) {
                memo[i][can_sell] = max(prices[i] + memo[i+1][0], memo[i+1][1]);
            } else {
                memo[i][can_sell] = max(-prices[i] + memo[i+1][1], memo[i+1][0]);
            }
        }
    }
    return memo[0][0];
}

// Space optimisation
int maxProfit(vector<int>& prices) {
    int n = prices.size();
    vector<int> next(2, 0);
    vector<int> curr(2, 0);

    for(int i=n-1;i>=0;i--) {
        for(int can_sell=0;can_sell<2;can_sell++) {
            if(can_sell == 1) {
                curr[can_sell] = max(prices[i] + next[0], next[1]);
            } else {
                curr[can_sell] = max(-prices[i] + next[1], next[0]);
            }
        }
        next = curr;
    }
    return next[0];
}



// Greedy Solution O(n), O(1)
// Price graph imagine kro na and socho ki hm koi gyani baba h
// ab saara price me uchhaal ko capture kr lete h
int maxProfit(vector<int>& prices) {
    int profit = 0;
    for(int i=0;i<prices.size()-1;i++) {
        if(prices[i+1]-prices[i] > 0) profit += prices[i+1]-prices[i];
    }
    return profit;
}
