LC link: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/

// Memoization
int helper(int i, int can_sell,auto &prices, auto &memo) {
    if(i>=prices.size()) return 0;
    if(memo[i][can_sell]!=-1) return memo[i][can_sell];
    if(can_sell) {
        return memo[i][can_sell] = max(prices[i] + helper(i+2, 0, prices, memo), helper(i+1, 1, prices, memo));
    }
    return memo[i][can_sell] = max(-prices[i] + helper(i+1, 1, prices, memo), helper(i+1, 0, prices, memo));
}
int maxProfit(vector<int>& prices) {
    int n = prices.size();
    vector<vector<int>> memo(n, vector<int>(2,-1));
    return helper(0,0,prices,memo);
}

// Tabulation
int maxProfit(vector<int>& prices) {
    int n = prices.size();
    vector<vector<int>> memo(n, vector<int>(2,0));
    for(int i=n-1;i>=0;i--) {
        for(int j = 0;j < 2;j++) {
            if(j) {
                int a = prices[i];
                if(i+2 < n) a += memo[i+2][0];
                int b = 0;
                if(i+1 < n) b = memo[i+1][1];
                memo[i][j] = max(a, b);
            } else {
                int a = -prices[i];
                if(i+1 < n) a+= memo[i+1][1];
                int b = 0;
                if(i+1 < n) b = memo[i+1][0];
                memo[i][j] = max(a, b);
            }
        }
    }
    return memo[0][0];
}
