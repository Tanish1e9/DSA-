LC link: https://leetcode.com/problems/longest-increasing-subsequence/

    // ye DP based approach h ek optimal approach bhi h niche dekh lena
    int f(int i,int last,auto&arr,auto&memo){
        if(i<0) return 0;
        if(memo[i][last]!=-1) return memo[i][last];
        int pick =0;
        if(last == arr.size() || arr[i] < arr[last]) pick = 1+f(i-1,i,arr,memo);
        int npick = f(i-1,last,arr,memo);
        return memo[i][last]=max(pick,npick);
    }
    int lengthOfLIS(vector<int>& arr) {
        int n=arr.size();
        // vector<vector<int>> memo(n,vector<int>(n+1,-1));
        // return f(n-1,n,arr,memo);

        // vector<vector<int>> memo(n,vector<int>(n+1,0));
        // for(int i=0;i<n;i++){
        //     for(int last=i+1;last<=n;last++){
        //         if(i==0){
        //             if(last == n || arr[i]<arr[last]) memo[i][last]=1;
        //         }
        //         else{
        //             int pick =0;
        //             if(last == arr.size() || arr[i] < arr[last]) pick = 1+memo[i-1][i];
        //             int npick = memo[i-1][last];
        //             memo[i][last]=max(pick,npick);
        //         }
        //     }
        // }
        // return memo[n-1][n];

        vector<int>prev(n+1,0);
        for(int i=0;i<n;i++){
            for(int last=i+1;last<=n;last++){
                if(i==0){
                    if(last == n || arr[i]<arr[last]) prev[last]=1;
                }
                else{
                    int pick =0;
                    if(last == arr.size() || arr[i] < arr[last]) pick = 1+prev[i];
                    int npick = prev[last];
                    prev[last]=max(pick,npick);
                }
            }
        }
        return prev[n];
    }

    // Here is the optimal Nlog n approach with printing of any valid 
    // Longest increasing subsequence
    int lengthOfLIS(vector<int>& arr) {
    	vector<int> arr;
        unordered_map<int,int> inserted_at;
        for(int i=0;i<nums.size();i++) {
            int idx = lower_bound(arr.begin(), arr.end(), nums[i]) - arr.begin();
            if(idx == arr.size()) arr.push_back(nums[i]);
            else arr[idx] = nums[i];
            inserted_at[idx+1] = nums[i];
        }
        for(int i=1;i<=arr.size();i++) {
            cout << inserted_at[i] << " ";
        }
        cout << endl;
        return arr.size();
    }
