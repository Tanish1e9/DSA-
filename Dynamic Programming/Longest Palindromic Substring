LC link: https://leetcode.com/problems/longest-palindromic-substring/

// Agar lag rha h ki longest common substring between string and its reverse nikal denge to ho jayega 
// then see this "aacabdkacaa" <- iska ans aaca aa jayega jo ki galat h


// 1) DP solution h O(n^2), O(n^2) me
// 2) Space-orbit also O(n^2), O(1) me
// 3) Manacher's Algo, O(n), O(n) me


    void func(string&s,int start,int end,int &ans,int &st_idx){
        int n=s.size();
        while(start>=0 && end<n){
            if(s[start]==s[end]){
                start--;
                end++;
            }
            else break;
        }
        int len = end-1-start;
        if(len>ans){
            ans=len;
            st_idx=start+1;
        }
    }
    string longestPalindrome(string s) {
        int n=s.size();
        // vector<vector<bool>> memo(n,vector<bool>(n,0));
        // int ans=0;
        // int start=-1;
        // for(int gap=0;gap<n;gap++){
        //     for(int i=0;i<n-gap;i++){
        //         if(gap==0) memo[i][i+gap]=1;
        //         else if(gap==1){
        //             memo[i][i+gap]=(s[i+gap]==s[i]);
        //         }
        //         else{
        //             if(s[i+gap]==s[i]){
        //                 memo[i][i+gap] = memo[i+1][i+gap-1];
        //             }
        //         }
        //         if(memo[i][i+gap]){
        //             if(gap+1 > ans){
        //                 ans=gap+1;
        //                 start = i;
        //             }
        //         }
        //     }
        // }
        // return s.substr(start,ans); 

        int ans=0,st_idx=-1;
        for(int i=0;i<n;i++){
            func(s,i-1,i+1,ans,st_idx);
            func(s,i,i+1,ans,st_idx);
        }
        return s.substr(st_idx,ans);
    }
