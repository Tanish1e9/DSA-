LC link: https://leetcode.com/problems/minimum-falling-path-sum/

    int f(int i,int j,auto&grid,auto&memo){
        if(i>=grid.size()) return 0;
        if(j>=grid.size() || j<0) return 1e9;
        if(memo[i][j]!=-1) return memo[i][j];
        int a = f(i+1,j-1,grid,memo);
        int b = f(i+1,j,grid,memo);
        int c = f(i+1,j+1,grid,memo);
        return memo[i][j]=min({a,b,c})+grid[i][j];
    }
    int minFallingPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        // vector<vector<int>>memo(n,vector<int>(n,-1));
        // int ans=1e9;
        // for(int i=0;i<n;i++){
        //     ans = min(ans,f(0,i,grid,memo));
        // }
        // return ans;

        vector<vector<int>>memo(n+1,vector<int>(n,0));
        for(int i=n-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                int a = 1e9,b=1e9,c=1e9;
                if(j>=1) a=memo[i+1][j-1];
                b = memo[i+1][j];
                if(j<n-1) c = memo[i+1][j+1];
                memo[i][j]=min({a,b,c})+grid[i][j];
            }
        }
        return *min_element(memo[0].begin(),memo[0].end());

        // vector<int>next(n,0),curr(n,0);
        // for(int i=n-1;i>=0;i--){
        //     for(int j=n-1;j>=0;j--){
        //         int a=1e9,b=1e9,c=1e9;
        //         if(j>=1) a=next[j-1];
        //         b=next[j];
        //         if(j<n-1)c=next[j+1];
        //         curr[j]=min({a,b,c})+grid[i][j];
        //     }
        //     next=curr;
        // }
        // return *min_element(next.begin(),next.end());
    }
