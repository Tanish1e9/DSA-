GFG link: https://www.geeksforgeeks.org/problems/printing-longest-increasing-subsequence/1

    // yaha arr me apna ans store hoga
    // memo[i][last] denotes length of LIS considering only nums[i...n-1] with the index of the last element picked as 'last'
    // to shuru se hi chal rhe h aur jaha bhi le skte waha le le rhe
    // kyunki shuru se chal rhe h to lexicographically smallest hi ayega
    vector<int> getLIS(vector<int>& nums) {
    	vector<int> arr;
    	int n = nums.size();
    	vector<vector<int>> memo(n+1, vector<int>(n+1, 0));
    
    	for(int i=n-1;i>=0;i--) {
    		memo[i][n] = max(1+memo[i+1][i], memo[i+1][n]);
    		for(int last=i-1;last>=0;last--) {
    			if(nums[i] > nums[last]) memo[i][last] = max(memo[i+1][last], 1 + memo[i+1][i]);
    			else memo[i][last] = memo[i+1][last];
    		}
    	}
    
    	int max_len = memo[0][n];
    	int last = n;
    	for(int i=0;i<n;i++) {
    		if(memo[i+1][i] == max_len - arr.size() - 1) {
    			arr.push_back(nums[i]);
    			last = i;
    		}
    	}
    
    	return arr;
    }

// Ye rha O(nlogn) me printing
// basically ek inserted_at_length har ek element k lie rakh lo fir increasing length k order me print kr skte wo ek LIS hoga
// index wise lexicographically smallest k lie thoda mehnat kie h like map bana lie aur fir end se chalte ja rhe h
// ab jab bhi element daal sake that is uska next index allow kre to daal dena h because we are choosing lower index elements
// aur ye jo lower bound waale ka intuition h na ye yahi h ki at a given length sabse minimum se minimum value rakha jaye taaki there is more room for expansion
// aur ye yaad rakhna ki arr is not the LIS rather it is the smallest values for every possible length yaani there will be some inc subsequence
// of the length ending with that value which is in arr
// Aur ek baat ki nums me repitition ho skta h na values ka to map agar banake usme nums[i] ko key rakh ke idx + 1 store krte 
// to galat ho skta h islie i ko hi key rakhke store krna h ab jab aisa h hi to vector bana die

    vector<int> getLIS(vector<int>& nums) {
        vector<int> arr;
        vector<int> inserted_at(nums.size());
        for(int i=0;i<nums.size();i++) {
            int idx = lower_bound(arr.begin(), arr.end(), nums[i]) - arr.begin();
            if(idx == arr.size()) arr.push_back(nums[i]);
            else arr[idx] = nums[i];
            inserted_at[i] = idx + 1;
        }
        vector<int> seq(arr.size(), -1);
        for(int i=nums.size()-1;i>=0;i--) {
            if(inserted_at[i] == arr.size() || seq[inserted_at[i]] > nums[i]) {
                seq[inserted_at[i] - 1] = nums[i];
            }
        }
        
        return seq;
    }
