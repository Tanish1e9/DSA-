GFG link: https://www.geeksforgeeks.org/problems/printing-longest-increasing-subsequence/1

    // yaha seq[i] denotes LIS length starting at arr[i]
    // aur fir to backtrack kr rhe samajh aa hi rha h
    // lexicographically smallest index waala LIS chahye islie dekho jitna shuru ka element le sake wo lia gya h har jagah
    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        vector<int> seq(n,1);
        vector<int> child(n);
        for(int i=0;i<n;i++) child[i]=i;
        
        int max_ind=-1,maxi=0;
        for(int i=n-1;i>=0;i--){
            for(int j=i+1;j<n;j++){
                if(arr[j]>arr[i] && seq[j]+1>seq[i]){
                    seq[i]=seq[j]+1;
                    child[i]=j;
                }
            }
            if(seq[i]>=maxi){
                maxi=seq[i];
                max_ind=i;
            }
        }
        vector<int>ans={arr[max_ind]};
        int i=max_ind;
        while(child[i]!=i){
            ans.push_back(arr[child[i]]);
            i=child[i];
        }
        return ans;
    }

// Ye rha O(nlogn) me printing
// basically ek inserted_at_length har ek element k lie rakh lo fir increasing length k order me print kr skte wo ek LIS hoga
// index wise lexicographically smallest k lie thoda mehnat kie h like map bana lie aur fir end se chalte ja rhe h
// ab jab bhi element daal sake that is uska next index allow kre to daal dena h because we are choosing lower index elements
// aur ye jo lower bound waale ka intuition h na ye yahi h ki at a given length sabse minimum se minimum value rakha jaye taaki there is more room for expansion
// aur ye yaad rakhna ki arr is not the LIS rather it is the smallest values for every possible length yaani there will be some inc subsequence
// of the length ending with that value which is in arr
// Aur ek baat ki nums me repitition ho skta h na values ka to map agar banake usme nums[i] ko key rakh ke idx + 1 store krte 
// to galat ho skta h islie i ko hi key rakhke store krna h ab jab aisa h hi to vector bana die

    vector<int> getLIS(vector<int>& nums) {
        vector<int> arr;
        vector<int> inserted_at(nums.size());
        for(int i=0;i<nums.size();i++) {
            int idx = lower_bound(arr.begin(), arr.end(), nums[i]) - arr.begin();
            if(idx == arr.size()) arr.push_back(nums[i]);
            else arr[idx] = nums[i];
            inserted_at[i] = idx + 1;
        }
        vector<int> seq(arr.size(), -1);
        for(int i=nums.size()-1;i>=0;i--) {
            if(inserted_at[i] == arr.size() || seq[inserted_at[i]] > nums[i]) {
                seq[inserted_at[i] - 1] = nums[i];
            }
        }
        
        return seq;
    }
