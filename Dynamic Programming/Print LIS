GFG link: https://www.geeksforgeeks.org/problems/printing-longest-increasing-subsequence/1

    // yaha seq[i] denotes LIS length starting at arr[i]
    // aur fir to backtrack kr rhe samajh aa hi rha h
    // lexicographically smallest index waala LIS chahye islie dekho jitna shuru ka element le sake wo lia gya h har jagah
    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        vector<int> seq(n,1);
        vector<int> child(n);
        for(int i=0;i<n;i++) child[i]=i;
        
        int max_ind=-1,maxi=0;
        for(int i=n-1;i>=0;i--){
            for(int j=i+1;j<n;j++){
                if(arr[j]>arr[i] && seq[j]+1>seq[i]){
                    seq[i]=seq[j]+1;
                    child[i]=j;
                }
            }
            if(seq[i]>=maxi){
                maxi=seq[i];
                max_ind=i;
            }
        }
        vector<int>ans={arr[max_ind]};
        int i=max_ind;
        while(child[i]!=i){
            ans.push_back(arr[child[i]]);
            i=child[i];
        }
        return ans;
    }

// Ye rha O(nlogn) me printing
// basically ek inserted_at_length har ek element k lie rakh lo fir increasing length k order me print kr skte wo ek LIS hoga
// index wise lexicographically smallest k lie thoda mehnat kie h like map bana lie aur fir end se chalte ja rhe h
// ab jab bhi element daal sake that is uska next index allow kre to daal dena h because we are choosing lower index elements
// aur ye jo lower bound waale ka intuition h na ye yahi h ki at a given length sabse minimum se minimum value rakha jaye taaki there is more room for expansion
// aur ye yaad rakhna ki seq is not the LIS rather it is the smallest values for every possible length yaani there will be some inc subsequence
// of the length ending with that value which is in seq
    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        vector<int>seq;
        map<int,int> mpp;
        int maxi = 0;
        for(int i=0;i<n;i++){
            auto lb = lower_bound(seq.begin(),seq.end(),arr[i]);
            if(lb==seq.end()) {
                seq.push_back(arr[i]);
                mpp[i] = seq.size();
            }
            else {
                *lb=arr[i];
                mpp[i] = lb-seq.begin()+1;
            }
            maxi = max(maxi,(int)seq.size());
        }
        vector<int>ans(maxi,-1);
        for(int i=n-1;i>=0;i--){
            if(mpp[i]==maxi || ans[mpp[i]] > arr[i]){
                ans[mpp[i]-1]=arr[i];
            }
        }
        return ans;
    }
