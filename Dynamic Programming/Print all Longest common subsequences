GFG link: https://www.geeksforgeeks.org/problems/print-all-lcs-sequences3413/1

	// dekh isme na pehle approach dimag me aata h ki jaise any one LCS print kr rhe the na usi me
	// we will check ki left and up wale agar equal ho memo me to dono paths ko traverse kre through recursion
	// aur jab s[i-1]=t[j-1] ho tab to ye equal character aayega hi end me
	// par usse bhut repetitions banenge aur ye question me TLE de rha tha I tried to use a set<string>
	// so krna ye h ki we will try to construct LCS letter by letter from the end 
	// why end because hmlog memo[i][j] ko s[0...i-1],t[0....j-1] maane hue h
	// so we will pick a character and find its rightmost position in both strings
	// then jo bhi position mila suppose x and y so check memo[x+1][y+1] + temp.size() == lcs_len
	// yaani ye character ko ye position pe leke can we form a LCS 
	// if Yes then we are done for that character and just call the recurrence
	// for eg dekh abc, abac me b ko dhundega to ab,ab substrings me max len to 2 milega which is not lcs ... to b ko
	// leke aage jaake skip krne se behtar h call hi na kre that's why we check 

    void helper(int e1,int e2,string& temp,vector<vector<int>>&memo,int lcs_len,string&s,string&t){
	        if(temp.size()==lcs_len){
	            reverse(temp.begin(),temp.end());
	            ans.push_back(temp);
	            reverse(temp.begin(),temp.end());
	            return;
	        }
	        
	        if(e1<0 || e2<0) return;
	        for(char ch='a';ch<='z';ch++){
	            bool done=false;
	            for(int i=e1;i>=0;i--){
	                if(s[i]!=ch) continue;
	                for(int j=e2;j>=0;j--){
	                    if(t[j]!=ch) continue;
	                    if(temp.size() + memo[i+1][j+1] == lcs_len){
	                        temp.push_back(ch);
	                        helper(i-1,j-1,temp,memo,lcs_len,s,t);
	                        temp.pop_back();
	                        done=true;
	                        break;
	                    }
	                }
	                if(done) break;
	            }
	        }
	    }
		vector<string> all_longest_common_subsequences(string s, string t){
		    int m=s.size();
		    int n=t.size();
		    vector<vector<int>> memo(m+1,vector<int>(n+1,0));
            for(int i=1;i<=m;i++){
                for(int j=1;j<=n;j++){
                    if(s[i-1]==t[j-1]) memo[i][j]=1+memo[i-1][j-1];
                    else{
                        int pick = memo[i-1][j];
                        int npick = memo[i][j-1];
                        memo[i][j] = max(pick,npick);
                    }
                }
            }
            string temp;
            helper(m-1,n-1,temp,memo,memo[m][n],s,t);
            sort(ans.begin(),ans.end());
            return ans;
		}
