LC link: https://leetcode.com/problems/target-sum/description/

    // dekh target is the subset sum I am requiring here
    // so if target turns out negative and the array has only positive numbers it should be 0
    int helper(vector<int>&arr,int sum){
        int n=arr.size();
        vector<int>prev(sum+1,0);
        vector<int>curr(sum+1,0);
        for(int i=0;i<n;i++){
            for(int k=0;k<=sum;k++){
                if(i==0){
                    if(k==0) curr[k]=(arr[0]==0)+1;
                    else curr[k] = (arr[0]==k);
                }
                else{
                    int pick=0;
                    if(k>=arr[i]) pick=prev[k-arr[i]];
                    int npick = prev[k];
                    curr[k]= pick+npick;
                }
            }
            prev=curr;
        }
        return prev[sum];
    }
    int findTargetSumWays(vector<int>& nums, int d) {
        int tot = accumulate(nums.begin(),nums.end(),0);
        int target=(tot+d);
        if(target < 0) return 0;
        if(target&1) return 0;
        return helper(nums,target/2);
    }
