LC link: https://leetcode.com/problems/unique-paths-ii/

    int f(int i,int j,vector<vector<int>>&memo,auto&grid){
        if(i<0 || j<0) return 0;
        if(i==0 && j==0) return 1;
        if(grid[i][j]==1) return 0;
        if(memo[i][j]!=-1) return memo[i][j];
        int top = f(i-1,j,memo,grid);
        int left = f(i,j-1,memo,grid);
        return memo[i][j]=top+left;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        if(grid[0][0]==1 || grid[m-1][n-1]==1) return 0;
        // vector<vector<int>> memo(m,vector<int>(n,-1));
        // return f(m-1,n-1,memo,grid);

        // vector<vector<int>> memo(m,vector<int>(n,0));
        // for(int i=0;i<m;i++){
        //     for(int j=0;j<n;j++){
        //         if(grid[i][j]==1) continue;
        //         if(i==0 && j==0) memo[i][j]=1;
        //         else{
        //             if(i>=1) memo[i][j]+=memo[i-1][j];
        //             if(j>=1) memo[i][j]+=memo[i][j-1];
        //         }
        //     }
        // }
        // return memo[m-1][n-1];

        vector<int> prev(n,0),curr(n,0);
        prev[0]=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1) curr[j]=0;
                else if(i==0 && j==0) curr[j]=1;
                else{
                    if(i>=1) curr[j]=prev[j];
                    if(j>=1) curr[j]=prev[j] + curr[j-1];
                }
            }
            prev=curr;
        }
        return prev[n-1];
    }
