LC link: https://leetcode.com/problems/wildcard-matching/

    int f(int i,int j,string&s,string&t,auto&memo){
        if(i<0 && j<0) return 1;
        if(j<0) return 0;
        if(i<0){
            while(j>=0 && t[j]=='*') j--;
            return j<0;
        }
        if(memo[i][j]!=-1) return memo[i][j];
        if(s[i]==t[j] || t[j]=='?'){
            return memo[i][j]=f(i-1,j-1,s,t,memo);
        }
        else if(t[j]=='*') return memo[i][j]=f(i,j-1,s,t,memo) || f(i-1,j,s,t,memo);
        return memo[i][j]=0;
    }
    bool isMatch(string s, string t) {
        int m=s.size();
        int n=t.size();
        // vector<vector<int>> memo(m,vector<int>(n,-1));
        // return f(m-1,n-1,s,t,memo);

        // vector<vector<int>> memo(m+1,vector<int>(n+1,0));
        // memo[0][0]=1;
        // for(int j=1;j<=n && t[j-1]=='*';j++) memo[0][j]=1;
        // for(int i=1;i<=m;i++) memo[i][0]=0;
        // for(int i=1;i<=m;i++){
        //     for(int j=1;j<=n;j++){
        //         if(s[i-1]==t[j-1] || t[j-1]=='?'){
        //             memo[i][j] = memo[i-1][j-1];
        //         }
        //         else if(t[j-1]=='*') memo[i][j] = memo[i][j-1] || memo[i-1][j];
        //         else memo[i][j]=0;
        //     }
        // }
        // return memo[m][n];

        vector<int>prev(n+1,0),curr(n+1,0);
        prev[0]=1;
        for(int j=1;j<=n && t[j-1]=='*';j++) prev[j]=1;
        
        for(int i=1;i<=m;i++){
            curr[0]=0;
            for(int j=1;j<=n;j++){
                if(s[i-1]==t[j-1] || t[j-1]=='?'){
                    curr[j] = prev[j-1];
                }
                else if(t[j-1]=='*') curr[j] = curr[j-1] || prev[j];
                else curr[j]=0;
            }
            prev=curr;
        }
        return prev[n];
    }
