LC link: https://leetcode.com/problems/accounts-merge/description/


// Dekh ye thoda sa tough tha to come up but after seeing solution easy hi lagta h
// intuition yahi h ki since we need unique nodes har ek index ko hi node maan lia and unko merge krte gye
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n=accounts.size();
        DSU ds(n);
        unordered_map<string,int>mymap;
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){
                if(mymap.contains(accounts[i][j])) ds.union_by_size(i,mymap[accounts[i][j]]);
                else mymap[accounts[i][j]]=i;
            }
        }
        unordered_map<int,vector<string>> merged;
        for(auto &it:mymap){
            int ult_p = ds.find_par(it.second);
            merged[ult_p].push_back(it.first);
        }
        vector<vector<string>> ans;
        for(auto &it:merged){
            auto &vec = it.second;
            vector<string>temp={accounts[it.first][0]};
            sort(vec.begin(),vec.end());
            for(auto &str:vec){
                temp.push_back(str);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};


// M-2 
vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        DSU ds(accounts.size());
        map<string, int> email_owners;
        for(int i=0;i<accounts.size();i++) {
            auto &vec = accounts[i];
            for(int j=1;j<vec.size();j++) {
                if(email_owners.contains(vec[j])) {
                    ds.unionbysize(i, email_owners[vec[j]]);
                } else {
                    email_owners[vec[j]] = i;
                }
            }
        }
        vector<vector<string>> ans;
        unordered_map<int,int> mpp;
        for(auto &it:email_owners) {
            int ult = ds.find_par(it.second);
            int idx = ans.size();
            if(mpp.contains(ult)) {
                idx = mpp[ult];
            } else {
                ans.push_back(vector<string>());
                mpp[ult] = idx;
                ans.back().push_back(accounts[ult][0]);
            }
            ans[idx].push_back(it.first);
        }
        return ans;
    }
