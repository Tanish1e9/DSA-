CSES link: https://cses.fi/problemset/task/1679/

// Standard Topo Sort

#include<bits/stdc++.h>
using namespace std;
#define int long long
bool dfs(int node, auto &path_vis, auto &vis, auto &adj, auto &st) {
	vis[node] = true;
	path_vis[node] = true;
	for(int el:adj[node]) {
		if(!vis[el]) {
			if(dfs(el, path_vis, vis, adj, st)) return true;
		}
		else if(path_vis[el]) return true;
	}
	path_vis[node] = false;
	st.push(node);
	return false;
}
void bfs(int n, int m, auto &adj) {
	vector<int>indegree(n+1, 0);
	for(int i=1;i<=n;i++) {
		for(int j:adj[i]){
			indegree[j]++;
		}
	}
	queue<int> q;
	for(int i=1;i<=n;i++) {
		if(indegree[i]==0) q.push(i);
	}
	vector<int> topo;
	while(!q.empty()) {
		int curr = q.front();
		q.pop();
		topo.push_back(curr);
		for(int el:adj[curr]) {
			indegree[el]--;
			if(indegree[el]==0) q.push(el);
		}
	}
	if(topo.size()!=n) cout << "IMPOSSIBLE\n";
	else {
		for(int i:topo) {
			cout << i << " ";
		}
		cout << endl;
	}
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int n, m;
	cin >> n >> m;
	vector<vector<int>> adj(n+1);
	for(int i=0;i<m;i++) {
		int a,b;
		cin >> a >> b;
		adj[a].push_back(b);
	}
	// bfs(n,m,adj);
	vector<int>vis(n+1, false), path_vis(n+1, false);
	stack<int> st;
	for(int i=1;i<=n;i++) {
		if(vis[i]) continue;
		if(dfs(i,path_vis, vis,adj,st)) {
			cout << "IMPOSSIBLE\n";
			return 0;
		}
	}
	while(!st.empty()) {
		cout << st.top() << " ";
		st.pop();
	}
	return 0;
}
