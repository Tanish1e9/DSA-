CSES link: https://cses.fi/problemset/task/1683/

// Standard Kosaraju's algorithm h

#include<bits/stdc++.h>
using namespace std;
#define int long long
void dfs(int node, auto &adj, auto &vis, auto &st) {
	vis[node] = true;
	for(int el:adj[node]) {
		if(vis[el]) continue;
		dfs(el, adj, vis, st);
	}
	st.push(node);
}
void dfs2(int node, auto &adj, auto &vis, auto &ans, int c) {
	vis[node] = true;
	ans[node] = c;
	for(int el:adj[node]) {
		if(vis[el]) continue;
		dfs2(el, adj, vis, ans, c);
	}
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int n, m;
	cin >> n >> m;
	vector<vector<int>> adj(n+1);
	vector<vector<int>> rev_adj(n+1);
	for(int i=0;i<m;i++) {
		int a, b;
		cin >> a >> b;
		adj[a].push_back(b);
		rev_adj[b].push_back(a);
	}
	
	vector<bool> vis(n+1, false);
	stack<int> st;
	for(int i=1;i<=n;i++){
		if(!vis[i]) {
			dfs(i, adj, vis, st);
		}
	}
	vis = vector<bool>(n+1, false);
	vector<int> ans(n+1, -1);
	int c = 0;
	while(!st.empty()) {
		int node = st.top();
		st.pop();
		if(vis[node]) continue;
		dfs2(node, rev_adj, vis, ans, c+1);
		c++;
	}
	cout << c << "\n";
	for(int i=1;i<=n;i++) {
		cout << ans[i] << " ";
	}
	cout << endl;
	
	return 0;
}
