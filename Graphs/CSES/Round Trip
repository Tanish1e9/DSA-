CSES link: https://cses.fi/problemset/task/1669

#include<bits/stdc++.h>
using namespace std;
#define int long long
bool dfs(int start, int par, auto &adj, auto &path, auto &vis) {
	vis[start] = true;
	path.push_back(start);
	for(int el:adj[start]) {
		if(!vis[el]) {
			if(dfs(el, start, adj, path, vis)) return true;
		} else if(el!=par) {
			path.push_back(el);
			return true;
		}
	}
	path.pop_back();
	return false;
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int n, m;
	cin >> n >> m;
	vector<vector<int>> adj(n+1);
	for(int i=0;i<m;i++) {
		int a,b;
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	vector<int> path;
	vector<int>vis(n+1,false);
	for(int i=1;i<=n;i++) {
		if(vis[i]) continue;
		bool ans = dfs(i, -1, adj, path, vis);
		vector<int> final_path;
		if(ans) {
			int first = path.back();
			final_path.push_back(first);
			for(int i=path.size()-2;i>=0;i--) {
				final_path.push_back(path[i]);
				if(path[i]==first) {
					break;
				}
			}
			cout << final_path.size() << "\n";
			for(int i:final_path) {
				cout << i << " ";
			}
			cout << "\n";
			return 0;
		}
	}

	
	cout << "IMPOSSIBLE\n";
	return 0;	
}
