CSES link: https://cses.fi/problemset/task/1669

#include<bits/stdc++.h>
using namespace std;
#define int long long
int dfs(int node, auto &adj, auto &vis, auto &parent) {
	vis[node] = true;
	for(int el:adj[node]) {
		if(!vis[el]) {
			parent[el] = node;
			int val = dfs(el, adj, vis, parent);
			if(val!=-1) return val;
		} else if(el != parent[node]) {
			parent[el] = node;
			return el;
		}
	}
	return -1;
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int n, m;
	cin >> n >> m;
	vector<vector<int>> adj(n+1);
	for(int i=0;i<m;i++) {
		int a,b;
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	vector<int>vis(n+1,false);
	vector<int>parent(n+1, -1);
	int ans = -1;
	for(int i=1;i<=n;i++) {
		if(vis[i]) continue;
		ans = dfs(i,adj,vis,parent);
		if(ans != -1) break;
	}
	if(ans==-1) cout << "IMPOSSIBLE\n";
	else {
		int start = parent[ans];
		vector<int> path = {ans};
		while(start!=ans) {
			path.push_back(start);
			start = parent[start];
		}
		path.push_back(start);
		cout << path.size() << endl;
		for(int i:path) cout << i << " ";
		cout << endl;
	}
	return 0;	
}
