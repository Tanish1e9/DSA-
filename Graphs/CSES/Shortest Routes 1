CSES link: https://cses.fi/problemset/task/1671/

// standard Dijkstra ka set implementation h
// pq use krne par bhi accept hoga 
// bas dont forget to add that 'continue' wala line to not explore any further if the distance doesn't match
// halanki yaha comparator use krna nahi necessary h but still batate h
// maanlo a.first < b.first likha (= likhega to TLE aayega) 
// set me na comparator se hi unique keys decide hota h... so agar 2 elements aise aa gye jiska first element same h
// but second different to bhi set unko same maan ke ek ko delete kr dega
// which we dont want to islie accha se comparator likho ki agar pehla wala same h then dusre wale k hisab se order kr lo
// THIS will be accepted.

#include<bits/stdc++.h>
using namespace std;
#define int long long
typedef pair<int,int> p;
void bfs(int n, int m, auto &adj, auto &distances) {
	// priority_queue<p, vector<p>, greater<p>> pq;
	// pq.push({0,1});
	set<p> s;
	s.insert({0,1});
	distances[1] = 0;
	while(!s.empty()) {
		auto curr = *s.begin();
		s.erase(s.begin());
		// auto curr = pq.top();
		// pq.pop();
		// if(distances[curr.second]!=curr.first) continue;
		for(auto &el:adj[curr.second]) {
			if(distances[el.first] > curr.first + el.second) {
				if(distances[el.first]!=1e18) s.erase({distances[el.first], el.first});
				distances[el.first] = curr.first + el.second;
				// pq.push({distances[el.first], el.first});
				s.insert({distances[el.first], el.first});
			}
		}
	}
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int n, m;
	cin >> n >> m;
	vector<vector<pair<int,int>>> adj(n+1);
	for(int j=0;j<m;j++) {
		int a,b,c;
		cin >> a >> b >> c;
		adj[a].push_back({b,c});
	}
	vector<int>distances(n+1, 1e18);
	bfs(n,m,adj,distances);
	for(int i=1;i<=n;i++) {
		cout << distances[i] << " ";
	}
	cout << endl;
	return 0;
}
