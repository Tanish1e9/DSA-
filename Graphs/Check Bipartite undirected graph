LC link: https://leetcode.com/problems/is-graph-bipartite/


    bool dfs(int i,vector<vector<int>>&graph,vector<int>&vis,int colour){
        vis[i]=colour;
        for(auto el:graph[i]){
            if(!vis[el]){
                if(!dfs(el,graph,vis,-colour)) return 0;
            }
            else if(vis[el]==colour) return false;
        }
        return true;
    }
    bool bfs(int i,vector<vector<int>>&graph,vector<int>&vis,int colour){
        queue<pair<int,int>>q;
        q.push({i,colour});
        vis[i]=colour;
        while(!q.empty()){
            pair<int,int>curr=q.front();
            q.pop();
            for(auto el:graph[curr.first]){
                if(!vis[el]){
                    vis[el]=-curr.second;
                    q.push({el,-curr.second});
                }
                else if(vis[el]==curr.second) return false;
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int v=graph.size();
        vector<int>vis(v,0);
        for(int i=0;i<v;i++){
            if(!vis[i]){
                // if(dfs(i,graph,vis,1)==0) return 0;
                if(bfs(i,graph,vis,1)==0) return 0;
            }
        }
        return true;
    }
