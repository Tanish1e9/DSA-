GFG link: https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

    bool dfs(int i,int par,vector<int>adj[],vector<int>&vis){
        vis[i]=1;
        for(auto el:adj[i]){
            if(!vis[el]){
                if(dfs(el,i,adj,vis)) return true;
            }
            else if(el!=par){
                return true;
            }
        }
        return false;
    }
    bool bfs(int i,vector<int>adj[],vector<int>&vis){
        queue<pair<int,int>>q;
        q.push({i,-1});
        vis[i]=1;
        while(!q.empty()){
            int curr=q.front().first;
            int par=q.front().second;
            q.pop();
            for(auto el:adj[curr]){
                if(!vis[el]){
                    vis[el]=1;
                    q.push({el,curr});
                }
                else if(el!=par) return true;
            }
        }
        return false;
    }
    bool isCycle(int v, vector<int> adj[]) {
        vector<int> vis(v,0);
        for(int i=0;i<v;i++){
            if(!vis[i])
                // if(dfs(i,-1,adj,vis))return true;
                if(bfs(i,adj,vis)) return true;
        }
        return false;
    }


// using DSU bhi kr skte h

bool isCycle(int V, vector<int> adj[]) {
    DSU ds(V);
    vector<pair<int,int>>edges;
    for(int i=0;i<V;i++){
        for(int el:adj[i]){
            if(el>i) edges.push_back({i,el});
        }
    }
    for(auto &edge:edges){
        int u=edge.first;
        int v=edge.second;
        if(ds.find_par(u)!=ds.find_par(v)){
            ds.union_by_size(u,v);
        }
        else return true;
    }
    return false;
}
