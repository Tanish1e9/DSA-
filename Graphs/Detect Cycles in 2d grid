LC link: https://leetcode.com/problems/detect-cycles-in-2d-grid/description/

// length >=4 to automatically ho jayega soch lo check krne ka jroorat hi ni h simply cycle detection algo lagana h 
// undirected graph ka
// also koi ek bhi coordinate parent k corresponding coordinate k equal na ho to true return
// waha || lagega and not && 

    int dx[4]={-1,1,0,0};
    int dy[4]={0,0,-1,1};
    bool bfs(int i,int j,auto&grid,auto&vis,char c){
        int n=grid.size();
        int m=grid[0].size();
        queue<vector<int>>q;
        q.push({i,j,-1,-1});
        vis[i][j]=1;
        while(!q.empty()){
            vector<int>curr=q.front();
            q.pop();
            for(int k=0;k<4;k++){
                int x=curr[0]+dx[k];
                int y=curr[1]+dy[k];
                if(x>=n || x<0 || y>=m || y<0 || grid[x][y]!=c) continue;
                if(!vis[x][y]){
                    vis[x][y]=1;
                    q.push({x,y,curr[0],curr[1]});
                }
                else if(x!=curr[2] || y!=curr[3]) return true;
            }
        }
        return false;
    }
    bool dfs(int i,int j,int parx,int pary,auto&grid,auto&vis,char c){
        int n=grid.size();
        int m=grid[0].size();
        vis[i][j]=1;
        for(int k=0;k<4;k++){
            int x=i+dx[k];
            int y=j+dy[k];
            if(x>=n || x<0 || y>=m || y<0 || grid[x][y]!=c) continue;
            if(!vis[x][y]){
                if(dfs(x,y,i,j,grid,vis,c)) return true;
            }
            else if(x!=parx || y!=pary) return true;
        }
        return false;
    }
    bool containsCycle(vector<vector<char>>& grid) {
        vector<vector<int>>vis(grid.size(),vector<int>(grid[0].size(),0));
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                // if(!vis[i][j] && bfs(i,j,grid,vis,grid[i][j])) return true;
                if(!vis[i][j] && dfs(i,j,-1,-1,grid,vis,grid[i][j])) return true;
            }
        }
        return false;
    }
