CSES link: https://cses.fi/problemset/task/1693

// Standard directed graph wala Eulerian path h
// Aur observe krna bas ki path ka length to m+1 hi hoga na agar wo euler path h to 
// har ek move ek edge ko hi to cover krta h

#include<bits/stdc++.h>
using namespace std;
#define int long long
void dfs(int node, auto &adj, auto &path) {
	while(adj[node].size()>0) {
		auto el = adj[node].back();
		adj[node].pop_back();
		dfs(el, adj, path);
	}
	path.push_back(node);
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int n, m;
	cin >> n >> m;
	vector<vector<int>> adj(n+1);
	vector<int> indegree(n+1, 0), outdegree(n+1, 0);
	for(int i=0;i<m;i++) {
		int a, b;
		cin >> a >> b;
		adj[a].push_back(b);
		indegree[b]++;
		outdegree[a]++;
	}
	for(int i=1;i<=n;i++) {
		if(i==1 && outdegree[i]!=indegree[i]+1) {
			cout << "IMPOSSIBLE\n";
			return 0;
		}
		if(i==n && indegree[i]!=outdegree[i]+1) {
			cout << "IMPOSSIBLE\n";
			return 0;
		}
		if(i!=1 && i!=n && indegree[i]!=outdegree[i]) {
			cout << "IMPOSSIBLE\n";
			return 0;
		}
	}
	
	vector<int> path;
	dfs(1, adj, path);
	if(path.size()!=m+1) {
		cout << "IMPOSSIBLE\n";
		return 0;
	}
	reverse(path.begin(), path.end());
	for(int i:path) {
		cout << i << " ";
	}
	cout << endl;
	return 0;
}