LC link: https://leetcode.com/problems/find-eventual-safe-states/


    bool dfs(int i,vector<vector<int>>&graph,vector<int>&vis,vector<int>&ans){
        vis[i]=2;
        // pathvis[i]=1;
        for(auto el:graph[i]){
            if(!vis[el]){
                if(dfs(el,graph,vis,ans)) return true;
            }
            else if(vis[el]==2) return true;
        }
        // pathvis[i]=0;
        vis[i]=1;
        ans.push_back(i);
        return false;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        vector<int> ans;
        int v=graph.size();
        vector<int>vis(v,0);
        // vector<int>pathvis(v,0);
        for(int i=0;i<v;i++){
            if(!vis[i]){
                dfs(i,graph,vis,ans);
            }
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
