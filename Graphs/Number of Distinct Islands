GFG link: https://www.geeksforgeeks.org/problems/number-of-distinct-islands/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_article


    // TC O(nxmxlog(nm)) + O(nxmx4) 
            outer for        DFS/BFS
    // SC O(nxm)
    int dx[4]={-1,1,0,0};
    int dy[4]={0,0,-1,1};
    void dfs(int i,int j,vector<vector<int>>& grid,vector<vector<int>>& vis,vector<pair<int,int>>& island,int x0,int y0){
        int m=grid.size();
        int n=grid[0].size();
        vis[i][j]=1;
        island.push_back({i-x0,j-y0});
        for(int k=0;k<4;k++){
            int x=i+dx[k];
            int y=j+dy[k];
            if(x>=m || x<0 || y>=n || y<0) continue;
            if(grid[x][y]==1 && !vis[x][y]) dfs(x,y,grid,vis,island,x0,y0);
        }
    }
    void bfs(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&vis,vector<pair<int,int>>&island){
        int m=grid.size();
        int n=grid[0].size();
        queue<pair<int,int>> q;
        q.push({i,j});
        vis[i][j]=1;
        while(!q.empty()){
            pair<int,int>curr=q.front();
            q.pop();
            island.push_back({curr.first-i,curr.second-j});
            for(int k=0;k<4;k++){
                int new_x=curr.first+dx[k];
                int new_y=curr.second+dy[k];
                if(new_x>=m || new_x<0 || new_y>=n || new_y<0) continue;
                if(!vis[new_x][new_y] && grid[new_x][new_y]==1){
                    q.push({new_x,new_y});
                    vis[new_x][new_y]=1;
                }
            }
        }
    }
    // ye jo convert function h this basically centres everything around 0,0 but that's not required bas base coordinate ghata dena h
    // that we can do during the traversal itself
    void convert(vector<pair<int,int>>&island){
        // sort(island.begin(),island.end());
        long long sumx=0,sumy=0;
        for(int k=0;k<island.size();k++){
            sumx+=island[k].first;
            sumy+=island[k].second;
        }
        for(int k=0;k<island.size();k++){
            island[k].first -= sumx/island.size();
            island[k].second -= sumy/island.size();
        }
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        set<vector<pair<int,int>>> total;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1 && !vis[i][j]){
                    vector<pair<int,int>> island;
                    dfs(i,j,grid,vis,island,i,j);
                    // bfs(i,j,grid,vis,island);
                    // convert(island);
                    total.insert(island);
                }
            }
        }
        return total.size();
    }
