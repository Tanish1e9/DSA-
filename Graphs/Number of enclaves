LC link: https://leetcode.com/problems/number-of-enclaves/
// literally surrounding regions wala hi question h
// isme to sirf connected walo ko hi touch krna h to bfs dfs dono chalega
// wo nearest one wale me sirf BFS hi chalega

    int dx[4]={-1,1,0,0};
    int dy[4]={0,0,-1,1};
    void dfs(int i,int j,auto&grid,auto &vis){
        int m=grid.size();
        int n=grid[0].size();
        vis[i][j]=1;
        for(int k=0;k<4;k++){
            int x=i+dx[k];
            int y=j+dy[k];
            if(x>=m || x<0 || y>=n || y<0) continue;
            if(grid[x][y]==1 && !vis[x][y]) dfs(x,y,grid,vis);
        }
    }
    void bfs(int i,int j,auto&grid,auto&vis){
        int m=grid.size();
        int n=grid[0].size();
        queue<pair<int,int>> q;
        q.push({i,j});
        vis[i][j]=1;
        while(!q.empty()){
            pair<int,int> curr=q.front();
            q.pop();
            for(int k=0;k<4;k++){
                int x=curr.first+dx[k];
                int y=curr.second+dy[k];
                if(x>=m || x<0 || y>=n || y<0) continue;
                if(grid[x][y]==1 && !vis[x][y]){
                    vis[x][y]=1;
                    q.push({x,y});
                }
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            if(grid[i][0]==1 && !vis[i][0]) bfs(i,0,grid,vis);
            if(grid[i][n-1]==1 && !vis[i][n-1]) bfs(i,n-1,grid,vis);
        }
        for(int j=0;j<n;j++){
            if(grid[0][j]==1 && !vis[0][j]) bfs(0,j,grid,vis);
            if(grid[m-1][j]==1 && !vis[m-1][j]) bfs(m-1,j,grid,vis);
        }
        int ans=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1 && !vis[i][j]) ans++;
            }
        }
        return ans;
    }
