GFG link: https://www.geeksforgeeks.org/problems/number-of-provinces/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_article


    void dfs(int i,vector<vector<int>>&adj,vector<int>&visited,int v){
        visited[i]=1;
        for(int el=0;el<v;el++){
            if(adj[i][el]==0 || el==i) continue;
            if(!visited[el]){
                dfs(el,adj,visited,v);
            }
        }
    }
    void bfs(int i,vector<vector<int>>&adj,vector<int>&visited,int v){
        queue<int>q;
        q.push(i);
        visited[i]=1;
        while(!q.empty()){
            int curr=q.front();q.pop();
            for(int el=0;el<v;el++){
                if(adj[curr][el]==0 || el==curr) continue;
                if(!visited[el]){
                    q.push(el);
                    visited[el]=1;
                }
            }
        }
    }
    int numProvinces(vector<vector<int>> adj, int v) {
        vector<int> visited(v,0);
        int ans=0;
        for(int i=0;i<v;i++){
            if(!visited[i]){
                ans++;
                //dfs(i,adj,visited,v);
                bfs(i,adj,visited,v);
            }
        }
        return ans;
    }
