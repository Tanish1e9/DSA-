LC link: https://leetcode.com/problems/pacific-atlantic-water-flow/

    // Dekh krna ye h ki pacific ki boundary se traversal chala do jisse wo saari nodes visit ho jaye jo pacific pahuch skti h
    // fir atlantic ki boundary se chala do
    // then dono ka intersection le lenge

    // Common mistakes:-
    1) Sirf top right and bottom left corner se chalana sufficient ni hoga because imagine kro na koi cell boundary k kisi bhi cell se
      ocean pahuch skta na to ho skta h top ka middle and right ka middle se dono ocean pahuch jaye to sirf corners se chalana sufficient ni hoga
    2) Ye ki pehle pacific ka chala die fir check kr rhe h ki jo cell pacific pahuch skta h wahi se atlantic wale ka call kre
    are mana ki koi cell pacific ni pahuch skta but wo kisi aur cell ko atlantic to pahucha skta h na jo ki pacific pahuch skta ho
    to aisa check krke you are leaving out some valid cells so dont do it ... Keep it simple


    int dx[4]={-1,1,0,0};
    int dy[4]={0,0,-1,1};
    void bfs(int i,int j,auto & heights,auto & vis){
        int m=heights.size();
        int n=heights[0].size();
        queue<pair<int,int>>q;
        q.push({i,j});
        vis[i][j]=1;
        while(!q.empty()){
            auto curr=q.front();
            q.pop();
            for(int k=0;k<4;k++){
                int x=curr.first+dx[k];
                int y=curr.second+dy[k];
                if(x>=m || x<0 || y>=n || y<0) continue;
                if(!vis[x][y] && heights[x][y] >= heights[curr.first][curr.second]){
                    q.push({x,y});
                    vis[x][y]=1;
                }
            }
        }
    }
    void dfs(int i,int j,auto&heights,auto&vis){
        int m=heights.size();
        int n=heights[0].size();
        vis[i][j]=1;
        for(int k=0;k<4;k++){
            int x=i+dx[k];
            int y=j+dy[k];
            if(x>=m || x<0 || y>=n || y<0) continue;
            if(!vis[x][y] && heights[x][y] >= heights[i][j]){
                dfs(x,y,heights,vis);
            }
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m=heights.size();
        int n=heights[0].size();
        vector<vector<int>>vis1(m,vector<int>(n,0));
        vector<vector<int>>vis2(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            if(!vis1[i][0]) dfs(i,0,heights,vis1);
            if(!vis2[i][n-1]) dfs(i,n-1,heights,vis2);
        }
        for(int j=0;j<n;j++){
            if(!vis1[0][j]) dfs(0,j,heights,vis1);
            if(!vis2[m-1][j]) dfs(m-1,j,heights,vis2);
        }
        
        vector<vector<int>> ans;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(vis1[i][j] && vis2[i][j]) ans.push_back({i,j});
            }
        }
        return ans;
    }
};
auto init = []() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    return 'c';
}();
