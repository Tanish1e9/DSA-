LC link: https://leetcode.com/problems/path-with-minimum-effort/

    // Bas dijkstra laga die h remember yaha pe node dubara visit hoke distance kam ho skta h to first time bottom right encounter hone pe return mat krna
    // encounter as in queue me daalte waqt return mat krna ye BFS with unit weights me kr skte h
    // par jaise hi queue se nikla tab sidhe return kr stke h because wo distance queue me minimum tha
    // and aage k koi bhi path hoga minimum utna effort to leke hi ayega that's why
    // it is true for those distances which are non-decreasing jaise normal edge weights add krna ya iss question me jaise tha waisa

    int dx[4] = {-1,1,0,0};
    int dy[4] = {0,0,-1,1};
    typedef pair<int,pair<int,int>> p;
    int minimumEffortPath(vector<vector<int>>& heights) {
        int m=heights.size();
        int n=heights[0].size();
        priority_queue<p,vector<p>,greater<p>> q;
        vector<vector<int>> ans(m,vector<int>(n,1e9));
        ans[0][0]=0;
        q.push({0,{0,0}});
        while(!q.empty()){
            auto curr = q.top();
            q.pop();
            if(curr.second.first == m-1 && curr.second.second == n-1) return curr.first;
            if(curr.first > ans[curr.second.first][curr.second.second]) continue;
            for(int k=0;k<4;k++){
                int x=curr.second.first + dx[k];
                int y=curr.second.second + dy[k];
                if(x>=m || x<0 || y>=n || y<0) continue;
                int new_effort = max(curr.first,abs(heights[curr.second.first][curr.second.second]-heights[x][y])); 
                if(ans[x][y] > new_effort){
                    ans[x][y] = new_effort;
                    q.push({ans[x][y],{x,y}});
                }
            }
        }
        return -1;
    }
