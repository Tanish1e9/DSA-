GFG link: https://www.geeksforgeeks.org/problems/shortest-path-in-undirected-graph-having-unit-distance/1

    // M-1 using vis array as normal
    // yahi tarika na wahi par applicable h jaha surity h ki jo node ko first visit krega wo minimum distance me krega
    // because level wise distance increase krta h yaha pe but wahi edge weights variable ho jate then this would not have worked
    // M-2 would have still worked bas usme thodi redundancies ho jati
    vector<int> shortestPath(vector<vector<int>>& edges, int n,int m, int src){
        vector<vector<int>> adj(n);
        for(auto edge:edges){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        vector<int>ans(n,-1);
        vector<int>vis(n,0);
        queue<pair<int,int>>q;
        q.push({src,0});
        vis[src]=1;
        while(!q.empty()){
            auto curr=q.front();
            q.pop();
            ans[curr.first]=curr.second;
            for(auto el:adj[curr.first]){
                if(!vis[el]){
                    q.push({el,curr.second+1});
                    vis[el]=1;
                }
            }
        }
        return ans;
    }

    // M-2 using ans itself as the vis array
    // yaha queue of pair banana as such imp ni tha ans array se hi distances dekh skte the
    vector<int> shortestPath(vector<vector<int>>& edges, int n,int m, int src){
        vector<vector<int>> adj(n);
        for(auto edge:edges){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        vector<int>ans(n,-1);
        ans[src]=0;
        queue<pair<int,int>>q;
        q.push({src,0});
        while(!q.empty()){
            auto curr=q.front();
            q.pop();
            for(auto el:adj[curr.first]){
                if(ans[el]==-1 || curr.second + 1 < ans[el]){
                    ans[curr.first]=curr.second+1;
                    q.push({el,curr.second+1});
                }
            }
        }
        return ans;
    }
