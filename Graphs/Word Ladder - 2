LC link: https://leetcode.com/problems/word-ladder-ii/
GFG link: https://www.geeksforgeeks.org/problems/word-ladder-ii/1

    // M-1 this is the brute way works on GFG but TLE on LC
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        vector<vector<string>>ans;
        int n = wordList.size();
        int len=beginWord.size();
        unordered_set<string> words;
        for(int i=0;i<n;i++){
            words.insert(wordList[i]);
        }
        if(words.find(endWord)==words.end()) return {};
        words.erase(beginWord);
        queue<vector<string>>q;
        q.push({beginWord});
    
        while(!q.empty()){
            int curr_size=q.size();
            set<string>tobe;
            while(curr_size--){
                auto curr=q.front();
                q.pop();
                if(curr.back()==endWord) {
                    ans.push_back(curr);
                    continue;
                }
                for(int i=0;i<len;i++){
                    string temp = curr.back();
                    for(char c='a';c<='z';c++){
                        temp[i]=c;
                        if(words.find(temp)!=words.end()){
                            tobe.insert(temp);
                            curr.push_back(temp);
                            q.push(curr);
                            curr.pop_back();
                        }
                    }
                }
            }
            for(auto temp:tobe) words.erase(temp);
        }
        return ans;
    }

    // M-2 ye sahi h overall ye question thoda tough h to do some dry runs
    int find_len(string &beginWord,string&endWord,vector<string>&wordList,auto &levels){
        unordered_set<string>words(wordList.begin(),wordList.end());
        words.erase(beginWord);
        if(words.find(endWord)==words.end()) return 0;
        queue<pair<string,int>>q;
        q.push({beginWord,1});
        while(!q.empty()){
            auto curr = q.front();q.pop();
            levels[curr.first]=curr.second;
            if(curr.first==endWord) return curr.second;
            for(int i=0;i<beginWord.size();i++){
                string temp = curr.first;
                for(char c='a';c<='z';c++){
                    temp[i]=c;
                    if(words.find(temp)!=words.end()){
                        words.erase(temp);
                        q.push({temp,curr.second+1});
                    }
                }
            }
        }
        return 0;
    }
    void dfs(string&endWord,string&beginWord,auto&ans,auto&temp,auto&levels){
        if(endWord==beginWord){
            temp.push_back(beginWord);
            reverse(temp.begin(),temp.end());
            ans.push_back(temp);
            reverse(temp.begin(),temp.end());
            temp.pop_back();
            return;
        }
        temp.push_back(endWord);
        int curr_level = levels[endWord];
        for(int i=0;i<beginWord.size();i++){
            string word = endWord;
            for(char c='a';c<='z';c++){
                word[i]=c;
                if(levels.contains(word) && levels[word]==curr_level-1){
                    dfs(word,beginWord,ans,temp,levels);
                }
            }
        }
        temp.pop_back();
    }
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_map<string,int> levels;
        int length = find_len(beginWord,endWord,wordList,levels);
        vector<vector<string>> ans;
        vector<string>temp;
        dfs(endWord,beginWord,ans,temp,levels);

        return ans;
    }
