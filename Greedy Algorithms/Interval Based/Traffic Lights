CSES link: https://cses.fi/problemset/task/1163/

// M-1 --- ye going forward wala implementation h
// bhut jagah lengths ko store krne k lie multiset bhi use kia gya h
// but wo thoda inefficient hoga bcz duplicate lengths aa gyi to jada space le lega as compared to map
// islie hi multiset wala solution fast input k dam par hi accept ho rha
// whereas ye map wala solution irrespective of fast input accept ho rha
#include<bits/stdc++.h>
using namespace std;
#define int long long
signed main(){
    int x,n;
    cin >> x >> n;
    map<int,int> mpp;
    set<int> lights;
    mpp[x]=1;
    lights.insert(0);
    lights.insert(x);
    for(int i=0;i<n;i++){
        int pos;
        cin >> pos;
        auto ub = lights.upper_bound(pos);
        auto lb = ub;lb--;
        int len = *ub - *lb;
        mpp[len]--;
        if(mpp[len]==0) mpp.erase(len);
        mpp[pos-*lb]++;
        mpp[*ub-pos]++;
        lights.insert(pos);
        cout << mpp.rbegin()->first << endl;
    }
    return 0;
}

// M-2 --- ye going backwards implementation
// ab yaha pe doubly linked list use krke bhi ho jata but ye sufficiently good laga mereko
// kabhi DLL ka solution dekhna ho to USACO guide pe dekh lena
#include<bits/stdc++.h>
using namespace std;
#define int long long
signed main(){
    int x,n;
    cin >> x >> n;
    set<int> lights;
    vector<int>ans(n);
    lights.insert(0);
    lights.insert(x);
    for(int i=0;i<n;i++){
        cin >> ans[i];
        // ans me filhaal positions store kr lia h
        // but baad me lengths daal dunga
        lights.insert(ans[i]);
    }
    int last =0;
    int maxi =0;
    for(auto&it:lights){
        maxi = max(maxi,it-last);
        last = it;
    }
    int last_pos= ans[n-1];
    ans[n-1]=maxi;
    for(int i=n-2;i>=0;i--){
        lights.erase(last_pos);
        auto ub = lights.upper_bound(last_pos);
        auto lb=ub;lb--;
        last_pos=ans[i];
        ans[i] = maxi = max(*ub-*lb,maxi);
    }
    for(int i=0;i<n;i++){
        cout << ans[i] << endl;
    }
    return 0;
}
