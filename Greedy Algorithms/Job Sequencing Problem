GFG link: https://www.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1


    // basically yahi implementation h ki na at any given instant of time t , top t jobs rhe priority queue me kyunki unko hi kr payenge and that's it
    // TC is again O(2nlogn)
    static bool comp(Job&a,Job&b){
        return a.dead < b.dead;
    }
    vector<int> JobScheduling(Job arr[], int n) { 
        sort(arr,arr+n,comp);
        priority_queue<int,vector<int>,greater<int>> pq;
        // int last = arr[0].dead;
        // int i=0;
        // while(i<n){
        //     while(arr[i].dead==last){
        //         pq.push(arr[i].profit);
        //         i++;
        //     }
        //     while(pq.size()>last){
        //         pq.pop();
        //     }
        //     last = arr[i].dead;
        // }
        // ye jo niche wala h thoda jada fast h because chote hi size pe popping ho ja rha upar me bade size pe ho rha barabar h baaki
        for(int i=0;i<n;i++){
            pq.push(arr[i].profit);
            if(pq.size()>arr[i].dead) pq.pop();
        }
        int tot_prof=0;
        int count = pq.size();
        while(!pq.empty()){
            tot_prof+=pq.top();
            pq.pop();
        }
        return {count,tot_prof};
    } 
