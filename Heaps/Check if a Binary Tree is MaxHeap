GFG link: https://www.geeksforgeeks.org/problems/is-binary-tree-heap/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_article

// To check completeness some common mistakes are 
1) sochna ki if count(left) >= count(right) for all nodes then the tree is complete
      counter ->     1 2 N 3 4 N N N N
2) sirf ye check krna ki har node k pas ya to left,right dono ho ya sirf left ho
      counter ->      1 2 N 3 N 

// Remember ki leaves start from index n/2 in a heap ( if 1-based then n/2+1)

// M-1 thoda clearly batate hue 
// isme h ki ek bar null child dikh gya uske baad koi aur valid child ni dikhna chahye
    bool completeness_check(struct Node*root){
        if(root==0) return 1;
        queue<Node*>q;
        q.push(root);
        bool flag = false;
        while(!q.empty()){
            int curr_size=q.size();
            while(curr_size--){
                Node*curr=q.front();
                q.pop();
                if(curr->left){
                    if(flag) return 0;
                    q.push(curr->left);
                }
                else flag = 1;
                
                if(curr->right){
                    if(flag) return 0;
                    q.push(curr->right);
                }
                else flag = 1;
            }
        }
        return 1;
    }
    bool value_check(struct Node*root){
        if(root==0) return 1;
        
        int left=-1,right=-1;
        if(root->left) left = root->left->data;
        if(root->right) right = root->right->data;
        if(max(left,right) > root->data) return 0;
        
        return value_check(root->left) && value_check(root->right);
    }
    bool isHeap(struct Node* root) {
        if(!value_check(root)) return 0;
        return completeness_check(root);
    }



// M-2 in a single pass
    bool isHeap(struct Node*root){
        if(root==0) return 1;
        queue<Node*>q;
        q.push(root);
        bool flag = false;
        while(!q.empty()){
            int curr_size=q.size();
            while(curr_size--){
                Node*curr=q.front();
                q.pop();
                if(curr->left){
                    if(flag) return 0;
                    q.push(curr->left);
                }
                else flag = 1;
                
                if(curr->right){
                    if(flag) return 0;
                    q.push(curr->right);
                }
                else flag = 1;
                
                int left=-1,right=-1;
                if(curr->left) left = curr->left->data;
                if(curr->right) right = curr->right->data;
                if(max(left,right) > curr->data) return 0;
            }
        }
        return 1;
    }
