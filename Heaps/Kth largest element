LC link: https://leetcode.com/problems/kth-largest-element-in-an-array/

    void heapify(auto&arr,int i){
		int n=arr.size();
		while(2*i+1<n){
			int left = 2*i+1;
			int right = 2*i+2;
			int maxi = left;
			if(right < n  && arr[right]>arr[maxi]) maxi = right;
			if(arr[maxi] > arr[i]){
				swap(arr[maxi],arr[i]);
				i=maxi;
			}
			else break;
		}
	}
	void removeMin(auto&arr){
		int n=arr.size();
		swap(arr[0],arr[n-1]);
		arr.pop_back();
		heapify(arr,0);
	}
    int findKthLargest(vector<int>& arr, int k) {
        // used max heap here
        // TC is O(n)+O(klogn)
        // int n=arr.size();
        // for(int i=n/2-1;i>=0;i--) heapify(arr,i);

        // for(int c=0;c<k-1;c++) removeMin(arr);
        // return arr[0];

        // TC is O(nlogk)
        priority_queue<int,vector<int>,greater<int>>pq;
        for(int i=0;i<k;i++) pq.push(arr[i]);
        for(int i=k;i<arr.size();i++){
            // pehle push krna jroori h because ho skta h na jo insert ho rha wo minimum ho
            // pehle se pop kra dia to ho skta h koi bada element pop ho jaye
            pq.push(arr[i]);
            pq.pop();
        }
        // har bar minimum element pop hota rhega
        // so end me we will have the top k elements
        // so usme se jo minimum hoga wohi to kth largest hoga
        return pq.top();
    }
