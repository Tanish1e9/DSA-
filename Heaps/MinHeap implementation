class MinHeap{
	public:
	vector<int>arr;
	MinHeap(){}
	MinHeap(vector<int>& nums){	
		arr=nums;
		buildheap();
	}
	void buildheap(){
		int n=arr.size();
		for(int i=n-1;i>=0;i--) heapify(i);
	}
	void heapify(int i){
		int n=arr.size();
		while(2*i+1<n){
			int left = 2*i+1;
			int right = 2*i+2;
			int mini = left;
			if(right < n  && arr[right]<arr[mini]) mini = right;
			if(arr[mini] < arr[i]){
				swap(arr[mini],arr[i]);
				i=mini;
			}
			else break;
		}
	}
	int getmin(){
		return arr[0];
	}
	void removeMin(){
		int n=arr.size();
		swap(arr[0],arr[n-1]);
		arr.pop_back();
		heapify(0);
	}
	void insert(int el){
		arr.push_back(el);
		int i=arr.size()-1;
		while(i>0 && arr[(i-1)/2] > arr[i]){
			swap(arr[(i-1)/2],arr[i]);
			i=(i-1)/2;
		}
	}
};
