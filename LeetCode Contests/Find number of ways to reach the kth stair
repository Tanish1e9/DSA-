LC link: https://leetcode.com/problems/find-number-of-ways-to-reach-the-k-th-stair/


    // int f(int i,int k,int j,auto&memo){
    //     if(i>k+1) return 0;
    //     if(!memo.contains(i)) memo[i]=vector<int>(32,-1);
    //     if(memo.contains(i) && memo[i][j]!=-1) return memo[i][j];
    //     int ans=(i==k) + (i-1==k);
    //     if(i>0) ans+=f(i-1+(1<<j),k,j+1,memo);
    //     ans+=f(i+(1<<j),k,j+1,memo);
    //     return memo[i][j]=ans;
    // }
    // int waysToReachStair(int k) {
    //     unordered_map<int,vector<int>> memo;
    //     int ans=f(1,k,0,memo);
    //     return ans;
    // }
    int ncr(int n, int r){
        long long ans=1;
        for(int i=1;i<=r;i++){
            ans=ans*(n-r+i);
            ans=ans/i;
        }
        return ans;
    }
    int waysToReachStair(int k){
        if(k==0) return 2;
        if(k==1 || k==2) return 4;
        int power = 2;
        int c=2;
        int ans=0;
        while(c<32){
            // since down jumps cannot be consecutive thus har ek upjump k lie ek downjumo add hoga 
            // and for initial position of 2 we have 2 down jumps 2->1 and 1->0 islie c=2 likha
            // fir power tk pahuchne k bad power-k downjumps krna h to c me se itna select kr lenge
            if(k>= power-c && k<=power) ans+=ncr(c,power-k);
            c++;
            power=power<<1;
        }
        return ans;
    }
