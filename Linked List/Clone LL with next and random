LC link: https://leetcode.com/problems/copy-list-with-random-pointer/



class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL) return head;
        // map<Node*,Node*> mymap;
        // Node*temp=head;
        // Node*dummy=new Node(-1);
        // Node*prev=dummy;
        // while(temp){
        //     if(mymap.find(temp)==mymap.end()) prev->next=new Node(temp->val);
        //     else  prev->next=mymap[temp];

        //     prev=prev->next;
        //     mymap[temp]=prev;
            
        //     if(temp->random){
        //         if(mymap.find(temp->random)!=mymap.end())
        //             prev->random=mymap[temp->random];
        //         else prev->random=new Node(temp->random->val);
        //     }
        //     mymap[temp->random]=prev->random;
        //     temp=temp->next;
        // }
        // prev=dummy->next;
        // delete dummy;
        // return prev;

        // Kuch nahi h 3 steps me hua h first step me copy nodes are inserted in between the nodes of original LL
        // Next step me their random pointers are set
        // Next step me the next pointers are rectified of both lists
        Node*temp=head;
        while(temp){
            Node*newNode=new Node(temp->val);
            newNode->next=temp->next;
            temp->next=newNode;
            temp=temp->next->next;
        }
        temp=head;
        while(temp){
            Node*copy_node=temp->next;
            if(temp->random)copy_node->random=temp->random->next;
            temp=temp->next->next;
        }
        temp=head;
        Node*ans=head->next;
        while(temp){
            Node*tobe=temp->next;
            if(tobe)temp->next=tobe->next;
            else temp->next=NULL;
            temp=tobe;
        }
        return ans;
    }
};
