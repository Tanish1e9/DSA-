GFG link: https://www.geeksforgeeks.org/problems/flattening-a-linked-list/1

// Same as merge k sorted LLs wala sab kuch
Node *flatten(Node *head)
{
    typedef pair<int,Node*> p;
	priority_queue<p,vector<p>,greater<p>> pq;
	Node*temp=head;
	while(temp){
		pq.push({temp->data,temp});
		temp=temp->next;
	}
	Node*dummy=new Node(-1);
	Node*prev=dummy;
	while(!pq.empty()){
		p curr=pq.top();
		pq.pop();
		prev->bottom=curr.second;
		prev=prev->bottom;
		Node*x=curr.second->bottom;
		if(x) pq.push({x->data,x});
	}
	return dummy->bottom;
}

// ye niche different tarah ka priority queue h
    class comp{
        public:
        bool operator ()(ListNode* a,ListNode* b){
            return a->val > b->val;
        }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0) return 0;
        priority_queue<ListNode*,vector<ListNode*>,comp>pq;
        for(int i=0;i<lists.size();i++){
            if(lists[i])pq.push(lists[i]);
        }
        ListNode*dummy=new ListNode(-1);
        ListNode*prev=dummy;
        while(!pq.empty()){
            ListNode*curr=pq.top();
            pq.pop();
            prev->next=curr;
            prev=curr;
            if(curr->next)pq.push(curr->next);
        }
        return dummy->next;
    }
