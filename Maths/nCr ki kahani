GFG link: https://www.geeksforgeeks.org/problems/ncr2132/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_article

    // yaha n,r <=1e5 the but since answer itself maybe large islie mod krne bol dia 
    // agar soch rhe ki inverse ka kyu lafda kia sidha pehle ans = ans * (n-r+den) krte then divide kr dete
    // to divide ni kia jata h mod k bich me
    // islie inverse lene se comfortable ho jao
    // btw prime nos k lie to simply power p-2 krna hota h
    // wrna extended euclidean algo lagta wo kabhi aur dekhenge
    int mod=1e9+7;
    int power(long long a,long long b){
        if(a%mod==0) return 0;
        long long ans=1;
        while(b>0){
            if(b&1){
                b--;
                ans=(ans*a)%mod;
            }
            b>>=1;
            a=(a*a)%mod;
        }
        return ans;
    }  
    int ncr(long long n, long long r) {
        long long ans=1;
        for(int den=1;den<=r;den++){
            ans = (ans * (n-r+den))%mod;
            ans = (ans * power(den,mod-2))%mod;
        }
        return ans;
    }

CSES link: https://cses.fi/problemset/task/1079/
    // yaha dekho multiple testcases h na to har bar wo loop chalaoge to TLE maar dega islie precompute krke rakh lie h
    // n,r <=1e6
    #include<bits/stdc++.h>
    using namespace std;
    #define int long long
    int mod=1e9+7;
    int power(int a,int b){
        if(a%mod==0) return 0;
        int ans=1;
        while(b>0){
            if(b&1){
                b--;
                ans= (ans*a)%mod;
            }
            else{
                b/=2;
                a = (a*a)%mod;
            }
        }
        return  ans;
    }
    signed main(){
        vector<int>fact(1e6+1,1),ifact(1e6+1,1);
        for(int i=2;i<1e6+1;i++){
            fact[i] = (fact[i-1]*i)%mod;
        }
        ifact[1e6] = power(fact[1e6],mod-2);
        for(int i=1e6-1;i>=2;i--){
            ifact[i] = (ifact[i+1]*(i+1))%mod;
        }
        int t;
        cin>> t;
        while(t--){
            int a,b;
            cin>>a>>b;
            int ans=fact[a];
            ans = (ans*ifact[a-b])%mod;
            ans = (ans*ifact[b])%mod;
            cout << ans << endl;
        }
        return 0;
    }


GFG link: https://www.geeksforgeeks.org/problems/ncr-mod-m-part-10038/1

    // yaha na n,r <=1e16 the that are very very large to yaha lucas theorem laga h
    // precompute to kie hi the
    int mod=1000003;
    vector<long long>fact(mod,1);
    vector<long long>ifact(mod,1);
    bool f=0;
    class Solution {
    public:
    long long power(long long a,long long b){
        if(a%mod==0) return 0;
        long long ans=1;
        while(b>0){
            if(b&1){
                b--;
                ans=(ans*a)%mod;
            }
            b>>=1;
            a=(a*a)%mod;
        }
        return ans;
    }   
    void pre(){
        for(long long i=2;i<mod;i++){
            fact[i] = (fact[i-1]*i)%mod;
        }
        ifact[mod-1] = power(fact[mod-1],mod-2);
        for(int i=mod-2;i>=2;i--){
            ifact[i] = ((i+1)*ifact[i+1])%mod;
        }
    }
    int nCr(long long n, long long r) {
        if(!f){
            pre();
            f=1;
        }
        long long ans=1;
        while(n && r){
            long long a = n%mod,b=r%mod;
            if(a<b) return 0;
            ans = (ans * fact[a])%mod;
            ans = (ans * ifact[a-b])%mod;
            ans = (ans * ifact[b])%mod;
            n/=mod;
            r/=mod;
        }
        if(r==0) return ans;
        return 0;
    }

// iske alawa ek aur part h jaha m is small aur waha chinese remainder theorem ka use aata wo kabhi aur dekhenge
