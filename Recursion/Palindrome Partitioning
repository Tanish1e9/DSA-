LC link: https://leetcode.com/problems/palindrome-partitioning/description/

    vector<vector<string>> ans;
    bool check(string&s){
        int st=0;
        int e=s.size()-1;
        while(st<e){
            if(s[st]!=s[e]) return 0;
            st++;
            e--;
        }
        return 1;
    }
    void f(int i,string&s,vector<string>&temp){
        if(i==s.size()){
            ans.push_back(temp);
            return;
        }
        string sub;
        for(int j=i;j<s.size();j++){
            sub+=s[j];
            if(check(sub)){
                temp.push_back(sub);
                f(j+1,s,temp);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        int n=s.size();
        vector<string> temp;;
        f(0,s,temp);
        return ans;
    }
