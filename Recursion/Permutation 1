LC link: https://leetcode.com/problems/permutations/

class Solution {
public:
    vector<vector<int>> ans;
    // void f(auto &nums,auto &temp,auto &visited){
    //     if(temp.size()==nums.size()){
    //         ans.push_back(temp);
    //         return;
    //     }
    //     for(int j=0;j<nums.size();j++){
    //         if(!visited[j]){
    //             temp.push_back(nums[j]);
    //             visited[j]=1;
    //             f(nums,temp,visited);
    //             temp.pop_back();
    //             visited[j]=0;
    //         }
    //     }
    // }
    void f(int i,auto&nums){
        if(i>=nums.size()){ans.push_back(nums);return;}
        for(int j=i;j<nums.size();j++){
            swap(nums[j],nums[i]);
            f(i+1,nums);
            swap(nums[j],nums[i]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<int> temp;
        // vector<int> visited(nums.size(),0);
        // f(nums,temp,visited);
        f(0,nums);
        return ans;
    }
};
