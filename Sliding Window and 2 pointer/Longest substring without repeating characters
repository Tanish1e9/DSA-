LC link: https://leetcode.com/problems/longest-substring-without-repeating-characters/description/


    int lengthOfLongestSubstring(string s) {
        // M-1 Brtue O(n^2) hai generating all substrings
        // int n=s.size();
        // int maxlen=0;
        // for(int i=0;i<n;i++){
        //     unordered_map<char,int>freq;
        //     for(int j=i;j<n;j++){
        //         freq[s[j]]++;
        //         if(freq[s[j]]>1) break;
        //         maxlen = max(maxlen,j-i+1);
        //     }
        // }
        // return maxlen;

        // M-2 Better O(2n) yaha two pointer lagaye h but reduce krne waqt l ko ek ek krke move kra rhe
        // int n=s.size();
        // unordered_map<char,int>freq;
        // int l=0,r=0;
        // int maxlen=0;
        // while(r<n){
        //     freq[s[r]]++;
        //     while(freq[s[r]]>1){
        //         freq[s[l]]--;
        //         l++;
        //     }
        //     maxlen = max(maxlen,r-l+1);
        //     r++;
        // }
        // return maxlen;

        // M-3 optimal yaha pe direct index store kr lie to l ek jhatke me move kr ja rha that's why it is O(n)
        int n=s.size();
        unordered_map<char,int>freq;
        int l=0,r=0;
        int maxlen=0;
        while(r<n){
            if(freq.contains(s[r]) && freq[s[r]] >=l){
                l = freq[s[r]]+1;
            }
            freq[s[r]]=r;
            maxlen = max(maxlen,r-l+1);
            r++;
        }
        return maxlen;
    }
