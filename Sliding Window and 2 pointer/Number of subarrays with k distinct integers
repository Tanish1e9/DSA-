LC link: https://leetcode.com/problems/subarrays-with-k-different-integers/

    int func(vector<int>&nums,int k){
        if(k<0) return 0;
        int l=0,r=0,count=0;
        int n=nums.size();
        unordered_map<int,int>freq;
        while(r<n){
            freq[nums[r]]++;
            while(freq.size()>k){
                freq[nums[l]]--;
                if(freq[nums[l]]==0) freq.erase(nums[l]);
                l++;
            }
            count+=r-l+1;
            r++;
        }
        return count;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        // O(4n),O(1)
        return func(nums,k) - func(nums,k-1);
        
    }
