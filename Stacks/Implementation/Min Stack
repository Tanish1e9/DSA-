// O(2n) space is used
class MinStack {
public:
    stack<pair<int,int>>s;
    MinStack() {}
    
    void push(int val) {
        if(s.empty()) s.push({val,val});
        else s.push({val,min(s.top().second,val)});
    }
    void pop() {
        s.pop();
    }
    
    int top() {
        return s.top().first;
    }
    
    int getMin() {
        return s.top().second;
    }
};

// ye to thoda trick khel gye long data type me chhupake 2 integers store kra die and boom we are done
class MinStack {
public:
    stack<long>s;
    long mini;
    MinStack() {
        mini=-1;
    }
    
    void push(int val) {
        if(s.size()==0) mini = val;
        else mini = min<long>(mini,val);
        long ans=val;
        ans &= ((1ll<<32) - 1);
        long temp=(mini << 32);
        s.push(ans | temp);
    }
    
    void pop(){
        s.pop();
        if(!s.empty())mini = s.top()>>32;
    }
    
    int top() {
        long el = s.top();
        long val = (1ll<<32) - 1;
        return val & el;
    }
    
    int getMin() {
        long el = s.top();
        return el>>32;
    }
};

// O(n) space is used
// but haa agar long wale constraints hote to ye use hi ni ho pata fir to pair hi krna pdta

1) Why is modified value always less than current minimum?
-> since if there comes a val < mini we do 2*val - mini and then update mini to val 
so val - prev_mini is negative and hence the modified value is less than val which is the current mini
So in this case the top is simply current minimum

2) then when we pop we need to update the minimum so that also is done
2*mini - s.top()
2*mini - (2*mini-prev_mini)

3) also 2* krne se kuch overflow ho ja rha tha islie aisa +- krke likh die h 

class MinStack {
public:
    stack<long>s;
    long mini;
    MinStack() {
        mini=-1;
    }
    
    void push(int val) {
        if(s.size()==0) {
            mini = val;
            s.push(val);
        }
        else if(val < mini){
            s.push(val-mini+val);
            mini=val;
        }
        else s.push(val);
    }
    
    void pop(){
        if(s.top() < mini) mini=mini-s.top()+mini;
        s.pop();
    }
    
    int top() {
        if(s.top() < mini) return mini;
        return s.top();
    }
    
    int getMin() {
        return mini;
    }
};
