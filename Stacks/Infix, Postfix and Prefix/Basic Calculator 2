LC link: https://leetcode.com/problems/basic-calculator-ii/

// ye code originally hm kie h but isme O(n) space ja rha na so we need to optimise
// ekdum infix ko jaise 2 stack se solve krte h usi template pe h

map<char, int> priority;
bool is_operator(char c) {
    if(c=='+' || c=='-' || c=='/' || c=='*') return true;
    return false;
}
void empty_ops(auto &operand, auto &operators, bool check, char s) {
    while(!operators.empty() && (!check || priority[operators.top()] >= priority[s])) {
        int b = operand.top();operand.pop();
        int a = operand.top();operand.pop();
        char c = operators.top();operators.pop();
        if(c=='+') operand.push(a+b);
        else if(c=='-') operand.push(a-b);
        else if(c=='*') operand.push(a*b);
        else operand.push(a/b);
    }
}
int calculate(string s) {
    priority['+'] = priority['-'] = 1;
    priority['*'] = priority['/'] = 2;
    stack<char> operators;
    stack<int> operand;
    int i=0;
    int n = s.size();
    while(i<n) {
        if(isspace(s[i])) {
            i++;
            continue;
        }
        if(is_operator(s[i])) {
            empty_ops(operand, operators, true, s[i]);
            operators.push(s[i]);
        } else {
            int j=i;
            int num=s[i]-'0';
            while(i+1<n && isdigit(s[i+1])) {
                i++;
                num = num*10+(s[i]-'0');
            }
            operand.push(num);
        }
        i++;
    }
    empty_ops(operand, operators, false, 'a');
    return operand.top();
}

// literally jo basic calc 1 me kie the na couple of variables maintain krke blkul waise hi kie h
// yaha stack use ni krna padega because brackets nhi h
// agar brackets hote to bhi stack ka use kr lete isi solution ko extend krne k lie

    void update_ans(int&sign,char&last_op,int&num,int&last_num,int&ans){
        if(last_op==' ') ans+=sign*num;
        else if(last_op=='/') ans+=sign*(last_num/num);
        else ans+=sign*(last_num*num);
        last_op=' ';
        last_num=0;
        num=0;
    }
    int calculate(string s) {
        int ans=0;
        int num=0;
        int sign=1;
        char last_op=' ';
        int last_num=0;
        for(int i=0;i<s.size();i++){
            if(isspace(s[i])) continue;
            if(isdigit(s[i])){
                num=num*10+(s[i]-'0');
            }
            else if(s[i]=='+' || s[i]=='-'){
                update_ans(sign,last_op,num,last_num,ans);
                sign=(s[i]=='+'?1:-1);
            }
            else{
                if(last_op==' ') last_num=num;
                else if(last_op=='/') last_num=last_num/num;
                else last_num=last_num*num;
                num=0;
                last_op = s[i];
            }
        }
        update_ans(sign,last_op,num,last_num,ans);
        return ans;
    }
