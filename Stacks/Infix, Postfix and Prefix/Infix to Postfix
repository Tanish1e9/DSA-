GFG link: https://www.geeksforgeeks.org/problems/infix-to-postfix-1587115620/1

    // ye wala to wahi infix solve krne wala intuition se hm kr die h
    // but it can be optimised

    bool isoperator(char ch){
        return ch=='+' || ch=='-' || ch=='^' || ch=='*' || ch=='/';
    }
    string infixToPostfix(string s) {
        map<char,int>precedence;
        precedence['^']=2;
        precedence['*']=precedence['/']=1;
        precedence['+']=precedence['-']=0;
        precedence['(']=-1;
        stack<string>operands;
        stack<char>operators;
        for(int i=0;i<s.size();i++){
            if(s[i]=='(') {
                operators.push(s[i]);
                continue;
            }
            if(s[i]==')'){
                while(operators.top()!='('){
                    string b=operands.top();operands.pop();
                    string a=operands.top();operands.pop();
                    char ch=operators.top();
                    operators.pop();
                    operands.push(a+b+ch);
                }
                operators.pop();
            }
            else if(isoperator(s[i])){
                while(!operators.empty() && precedence[operators.top()]>=precedence[s[i]]){
                    string b=operands.top();operands.pop();
                    string a=operands.top();operands.pop();
                    char ch=operators.top();
                    operators.pop();
                    operands.push(a+b+ch);
                }
                operators.push(s[i]);
            }
            else operands.push(string(1,s[i]));
        }
        while(!operators.empty()){
            string b=operands.top();operands.pop();
            string a=operands.top();operands.pop();
            char ch=operators.top();
            operators.pop();
            operands.push(a+b+ch);
        }
        return operands.top();
    }

// ye h simply optimised version infix me jaise operators pop hote usi prakaar hua h bas operands ko direct ans me bhejte ja rhe 

    bool isoperator(char ch){
        return ch=='+' || ch=='-' || ch=='^' || ch=='*' || ch=='/';
    }
    string infixToPostfix(string s) {
        map<char,int>precedence;
        precedence['^']=2;
        precedence['*']=precedence['/']=1;
        precedence['+']=precedence['-']=0;
        precedence['(']=-1;
        string ans;
        stack<char>operators;
        for(int i=0;i<s.size();i++){
            if(s[i]=='(') {
                operators.push(s[i]);
                continue;
            }
            if(s[i]==')'){
                while(operators.top()!='('){
                    ans.push_back(operators.top());
                    operators.pop();
                }
                operators.pop();
            }
            else if(isoperator(s[i])){
                while(!operators.empty() && precedence[operators.top()]>=precedence[s[i]]){
                    ans.push_back(operators.top());
                    operators.pop();
                }
                operators.push(s[i]);
            }
            else ans.push_back(s[i]);
        }
        while(!operators.empty()){
            ans.push_back(operators.top());
            operators.pop();
        }
        return ans;
    }
