LC link: https://leetcode.com/problems/sliding-window-maximum/

    // ye h ek bakwaas solution multiset ka use krte hue
    vector<int> maxSlidingWindow(vector<int>& arr, int k) {
        int n=arr.size();
        vector<int>ans;
        multiset<int>s;
        for(int i=0;i<k;i++) s.insert(arr[i]);
        auto x=s.end();
        x--;
        ans.push_back(*x);
        for(int i=k;i<n;i++){
            x=s.find(arr[i-k]);
            s.erase(x);
            s.insert(arr[i]);
            x=s.end();
            x--;
            ans.push_back(*x);
        }
        return ans;
    }

// Ye hai optimal simple deque ka istemaal kie h with the concept ki agar aage koi bada element aa ja rha
// to piche k chote elements ka koi mtlb nahi because un choto k lifespan se jada hi hoga iss aage wale ka lifespan
vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        int n=nums.size();
        vector<int>ans;
        
        for(int i=0;i<n;i++){
            while(!dq.empty() && nums[dq.back()]<=nums[i]) dq.pop_back();
            dq.push_back(i);
            if(dq.front()<=i-k) dq.pop_front();
            if(i>=k-1)ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
