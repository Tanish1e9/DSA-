LC link: https://leetcode.com/problems/sum-of-subarray-minimums/

// isme naive tarika to dikh hi rha h O(n^2) ka
// optimal me let's think about contribution of each element
// to har element pe jaake we will expand jab tk wo element selected subarray ka minimum rhe
// then fir jo range bana isme kitne subarray ban skte h left*right
// likhkar dekhoge to dikh jayega
// to it's like prev_smaller and next_smaller element khoj lena
// to bas monotonic stack wala sawaaal ho gya na
// jab equal koi element ho jaye to prevent double counting sirf ek hi side equal hone pe extend krenge jaise hm
// left pe kie h

    const int mod = 1e9+7;
    int sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        vector<long>left(n),right(n);
        stack<int>s;
        long ans=0;
        for(int i=0;i<n;i++){
            while(!s.empty() && arr[s.top()] > arr[i]) s.pop();
            if(s.empty()) left[i]=i+1;
            else left[i]= i-s.top();
            s.push(i);
        }
        s=stack<int>();
        for(int i=n-1;i>=0;i--){
            while(!s.empty() && arr[s.top()] >= arr[i]) s.pop();
            if(s.empty()) right[i]=n-i;
            else right[i]= s.top()-i;
            s.push(i);
        }
        for(int i=0;i<n;i++){
            ans=(ans+arr[i]*(left[i]*right[i])%mod)%mod;
        }
        return ans;
    }

// Now here comes the optimal solution which is just one pass
// Dekh yaha na left wala stack sirf maintain kr rhe
// aur jaise hi koi element stack k top se chota aa rha h na to usko to pop krenge hi
// but yaha se ye insight mila ki uss s.top() ka right smaller element is the current element
// wrna koi pehle aya hota chota to wo pop kra deta na
// to bas left ka data h hi right yaha se mil gya to uss s.top() wale ka contribution nikal gya
// also yaha equal likho chahe na likho dono correct h because isme na ek extra iteration chala h
// i==n pe aisa maan lia gya h ki hypothetical element h jo ki sabse chota h to jitne bhi elements stack pe h un
// sab ka right smaller h wo
// to agar equal walo ko tm consider kr lie pop krate time to thik h wrna jab end me hypo element lenge
// tab ho jayega consider try to dry run and see

    const int mod = 1e9+7;
    int sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        long ans=0;
        stack<long>s;
        for(int i=0;i<=n;i++){
            while(!s.empty() && (i==n || arr[s.top()] > arr[i])){
                int el = s.top();s.pop();
                long right = i-el;
                long left = el+1;
                if(!s.empty()) left = el-s.top();
                ans = (ans+arr[el]*(right*left)%mod)%mod;
            }
            s.push(i);
        }
        return ans;
    }
