LC link: https://leetcode.com/problems/sort-characters-by-frequency/

    string frequencySort(string s) {
        vector<int>freq(256,0);
        int n=s.size();
        for(int i=0;i<n;i++){
            freq[s[i]]++;
        }
        // iska TC is nlogn+n
        // // wo equal wala alag se islie likhe h ki agar freq equal hua na
        // // to fir character jumbled hoke aa skte
        // // ek sath aaye islie
        // auto comp=[&freq](char a,char b){
        //     if(freq[a]==freq[b]) return a<b;
        //     return freq[a]>freq[b];
        // };
        // sort(s.begin(),s.end(),comp);
        // return s;

        // TC is n+klogk   where k=256
        // SC is O(256)
        // we could have also created a vector of pair<char,int> and sorted it
        // that would also be same complexity
        // string ans;
        // priority_queue<pair<int,int>>pq;
        // for(int i=0;i<256;i++){
        //     if(freq[i]!=0) pq.push({freq[i],i});
        // }
        // while(!pq.empty()){
        //     auto curr=pq.top();pq.pop();
        //     ans+=string(curr.first,char(curr.second));
        // }
        // return ans;

        // TC O(n+k)
        // SC O(n)
        vector<vector<char>> buckets(n+1);
        for(int i=0;i<256;i++){
            if(freq[i]!=0) buckets[freq[i]].push_back(char(i));
        }
        string ans;
        for(int i=n;i>=1;i--){
            for(auto&ch:buckets[i]){
                for(int k=0;k<i;k++) ans.push_back(ch);
            }
        }
        return ans;
    }
