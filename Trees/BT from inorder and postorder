LC link: https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

    TreeNode* helper(int post_start,int post_end,int in_start,int in_end,
    vector<int>&postorder,vector<int>&inorder,unordered_map<int,int>&indices){
        if(post_start>post_end || in_start>in_end) return 0;

        TreeNode*root=new TreeNode(postorder[post_end]);
        int root_index=indices[root->val];
        int left_elements = root_index-in_start;

        root->left=helper(post_start,post_start+left_elements-1,in_start,root_index-1,postorder,inorder,indices);
        root->right=helper(post_start+left_elements,post_end-1,root_index+1,in_end,postorder,inorder,indices);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int post_start=0;
        int post_end=postorder.size()-1;
        int in_start=0;
        int in_end=inorder.size()-1;
    
        unordered_map<int,int> indices;
        for(int i=0;i<inorder.size();i++){
            indices[inorder[i]]=i;
        }
        return helper(post_start,post_end,in_start,in_end,postorder,inorder,indices);
    }
