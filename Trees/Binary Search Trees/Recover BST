LC link: https://leetcode.com/problems/recover-binary-search-tree/

    // Brute Force simply store the sorted values of all the nodes by doing any traversal
    // Then again travel inorder and exchange the values from your stored data structure

    // Optimal Solution O(N),O(1)
    // recursive bhi likha hua h
    // we just need 2 variables thoda sa dry run kro you will get it
    TreeNode *prev=0, *a=0, *b=0;
    void helper(TreeNode* root) {
        if(root==NULL) return;
        helper(root->left);
        if(prev && prev->val > root->val) {
            if(!a) {a = prev;b=root;}
            else b = root;
        }
        prev = root;
        helper(root->right);
    }
    void recoverTree(TreeNode* root) {
        // helper(root);
        // swap(a->val, b->val);
        TreeNode* curr = root;
        while(curr) {
            if(curr->left) {
                TreeNode* temp = curr->left;
                while(temp->right && temp->right!=curr)  temp= temp->right;
                if(temp->right) {
                    if(prev && prev->val > curr->val) {
                        if(!a) {
                            a = prev;
                            b = curr;
                        }
                        else b = curr;
                    }
                    temp->right = 0;
                    prev = curr;
                    curr = curr->right;
                } else {
                    temp->right = curr;
                    curr = curr->left;
                }
            }
            else {
                if(prev && prev->val > curr->val) {
                    if(!a) {
                        a = prev;
                        b = curr;
                    }
                    else b = curr;
                }
                prev = curr;
                curr = curr->right;
            }
        }
        swap(a->val, b->val);
    }
