LC link: https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/


    // ye optimal h yaha leaves to root bana rhe ek bar count kr lie total nodes then
    // left subtree pehle bana denge sath sath head move krte rhenge
    TreeNode* helper(ListNode* &head, int low, int high) {
        if(low>high) return NULL;
        int mid = (low + high + 1)/2;
        TreeNode* left = helper(head, low, mid-1);
        TreeNode* root = new TreeNode(head->val, left, 0);
        head = head->next;
        root->right = helper(head, mid+1, high);
        return root;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        int n= 0;
        ListNode* curr = head;
        while(curr) {
            curr = curr->next;
            n++;
        }
        return helper(head, 0, n-1);
    }

    // brute array me jaise krte h mid element ko root banake fir left and right subtree waha pe actually we are
    // constructing from root to leaves and TC  O(nlogn) chala jata similar to merge sort
    // TreeNode* sortedListToBST(ListNode* head) {
        // if(head==0) return 0;
        // if(head->next==0){
        //     return new TreeNode(head->val);
        // }
        // ListNode* slow=head,*fast=head->next->next;
        // while(fast!=0 && fast->next!=0){
        //     fast=fast->next->next;
        //     slow=slow->next;
        // }
        // TreeNode* root = new TreeNode(slow->next->val);
        // root->right=sortedListToBST(slow->next->next);
        // slow->next=0;
        // root->left=sortedListToBST(head);
        // return root;      
    // }
