LC linK: https://leetcode.com/problems/two-sum-iv-input-is-a-bst/description/

    void push_left(TreeNode*root,auto &s){
        while(root){
            s.push(root);
            root=root->left;
        }
    }
    void push_right(TreeNode*root,auto &s){
        while(root){
            s.push(root);
            root=root->right;
        }
    }
    bool findTarget(TreeNode* root, int k) {
        if(root==0) return 0;
        stack<TreeNode*>left;
        stack<TreeNode*>right;
        push_left(root,left);
        push_right(root,right);

        TreeNode*i=left.top(),*j=right.top();
        left.pop();
        right.pop();
        while(i!=j){
            if(i->val + j->val == k) return true;
            else if(i->val + j->val < k){
                push_left(i->right,left);
                i=left.top();
                left.pop();
            }
            else{
                push_right(j->left,right);
                j=right.top();
                right.pop();
            }
        }
        return false;
    }

// Another Great Quality Code
class BSTiterator{
    stack<TreeNode*> s;
    bool reverse;
    public:
    BSTiterator(TreeNode*root,bool rev){
        reverse=rev;
        push(root);
    }
    bool hasnext(){
        return !s.empty();
    }
    int next(){
        TreeNode*curr=s.top();
        s.pop();
        if(reverse) push(curr->left);
        else push(curr->right);
        return curr->val;
    }
    private:
    void push(TreeNode*curr){
        while(curr){
            s.push(curr);
            if(reverse){
                curr=curr->right;
            }
            else{
                curr=curr->left;
            }
        }
    }
};
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(root==0) return 0;
        BSTiterator l(root,false);
        BSTiterator r(root,true);

        int i=l.next();
        int j=r.next();
        while(i!=j){
            if(i+j==k) return true;
            else if(i+j<k) i=l.next();
            else j=r.next();
        }
        return 0;
    }
};
