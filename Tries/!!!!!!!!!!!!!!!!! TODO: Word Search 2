LC link: https://leetcode.com/problems/word-search-ii/


int dx[4] = {-1,1,0,0};
    int dy[4] = {0,0,-1,1};
    bool dfs(int st,int i, int j, auto &board, auto &word, auto &vis) {
        if(word[st]!=board[i][j]) return false;
        if(st==word.size()-1) return true;
        vis[i][j] = true;
        for(int k=0;k<4;k++) {
            int row = i + dx[k];
            int col = j + dy[k];
            if(row<0 || col <0 || row>=board.size() || col>=board[0].size() || vis[row][col]) continue;
            if(dfs(st+1, row, col, board, word, vis)) return true;
        }
        vis[i][j] = false;
        return false;
    }
    bool exist(vector<vector<char>>& board, string &word) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<bool>> vis(n,vector<bool>(m,false));
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(dfs(0,i,j,board,word,vis)) return true;
            }
        }
        return false;
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> ans;
        set<string> wordlist(words.begin(), words.end());
        while(!wordlist.empty()) {
            string s = *wordlist.begin();
            if(!exist(board, s)) {
                wordlist.erase(s);
                continue;
            }
            for(int i=0;i<s.size();i++) {
                if(wordlist.empty()) break;
                string pre;
                for(int j=i;j<s.size();j++) {
                    if(wordlist.empty()) break;
                    pre.push_back(s[j]);
                    if(wordlist.count(pre)) {
                        ans.push_back(pre);
                        wordlist.erase(pre);
                    }
                }
            }
        }
        return ans;
    }
